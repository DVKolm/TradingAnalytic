package com.example.ta.controller;

import com.example.ta.util.NumberFormatUtil;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URL;
import java.util.ResourceBundle;

@Slf4j
@Component
public class AveragingCalculatorController implements Initializable {

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    @FXML private RadioButton longRadioButton;
    @FXML private RadioButton shortRadioButton;
    @FXML private ToggleGroup tradeTypeToggleGroup;

    // –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    @FXML private TextField depositField;
    @FXML private TextField stopPercentField;
    @FXML private TextField desiredAvgPriceField;
    @FXML private TextField stopPriceField;

    @FXML private TextField entryPrice1Field;
    @FXML private TextField entryPrice2Field;
    @FXML private TextField entryPrice3Field;

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
    @FXML private Label volume1Label;
    @FXML private Label volume2Label;
    @FXML private Label volume3Label;
    @FXML private Label totalVolumeLabel;

    @FXML private Label weight1Label;
    @FXML private Label weight2Label;
    @FXML private Label weight3Label;

    @FXML private Label calculatedAvgPriceLabel;
    @FXML private Label totalCoinsLabel;
    @FXML private Label maxLossAmountLabel;
    @FXML private Label actualRiskPercentLabel;

    @FXML private Button calculateButton;
    @FXML private Button clearButton;

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–µ–π–±–ª—ã
    @FXML private Label tradeTypeInfoLabel;
    @FXML private Label stopInfoLabel;
    @FXML private Label profitInfoLabel;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AveragingCalculatorController (—Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –¥–ª—è –¢–í–•)");
        setupTradeTypeControls();
        setupInputFields();
        setupButtons();
        clearResults();
        updateTradeTypeInfo();
    }

    private void setupTradeTypeControls() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        tradeTypeToggleGroup.selectedToggleProperty().addListener((obs, oldToggle, newToggle) -> {
            updateTradeTypeInfo();
            updatePlaceholders();
            autoCalculate();
        });

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Long
        longRadioButton.setSelected(true);
    }

    private void updateTradeTypeInfo() {
        boolean isLong = longRadioButton.isSelected();

        if (isLong) {
            tradeTypeInfoLabel.setText("üü¢ LONG –ø–æ–∑–∏—Ü–∏—è ‚Äî –ø–æ–∫—É–ø–∞–µ–º –∞–∫—Ç–∏–≤, –æ–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã");
            stopInfoLabel.setText("üõë –°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ü–µ–Ω –≤—Ö–æ–¥–æ–≤");
            profitInfoLabel.setText("üìà –ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –≤—ã—à–µ –¢–í–•");

            tradeTypeInfoLabel.setStyle("-fx-text-fill: #27ae60; -fx-font-weight: bold;");
        } else {
            tradeTypeInfoLabel.setText("üî¥ SHORT –ø–æ–∑–∏—Ü–∏—è ‚Äî –ø—Ä–æ–¥–∞–µ–º –∞–∫—Ç–∏–≤, –æ–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã");
            stopInfoLabel.setText("üõë –°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞");
            profitInfoLabel.setText("üìâ –ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∏–∂–µ –¢–í–•");

            tradeTypeInfoLabel.setStyle("-fx-text-fill: #e74c3c; -fx-font-weight: bold;");
        }

        stopInfoLabel.setStyle("-fx-text-fill: #e67e22; -fx-font-weight: 600;");
        profitInfoLabel.setStyle("-fx-text-fill: #3498db; -fx-font-weight: 600;");
    }

    private void updatePlaceholders() {
        boolean isLong = longRadioButton.isSelected();

        if (isLong) {
            // Long: –≤—Ö–æ–¥—ã –≤—ã—à–µ —Å—Ç–æ–ø–∞
            desiredAvgPriceField.setPromptText("104400.00");
            stopPriceField.setPromptText("103500.00");
            entryPrice1Field.setPromptText("104586.00");
            entryPrice2Field.setPromptText("104396.00");
            entryPrice3Field.setPromptText("104058.00");
        } else {
            // Short: –≤—Ö–æ–¥—ã –Ω–∏–∂–µ —Å—Ç–æ–ø–∞
            desiredAvgPriceField.setPromptText("104400.00");
            stopPriceField.setPromptText("105500.00");
            entryPrice1Field.setPromptText("104214.00");
            entryPrice2Field.setPromptText("104404.00");
            entryPrice3Field.setPromptText("104742.00");
        }
    }

    private void setupInputFields() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        setupNumericField(depositField, "1000.00");
        setupNumericField(stopPercentField, "2.0");
        setupNumericField(desiredAvgPriceField, "104400.00");
        setupNumericField(stopPriceField, "103500.00");

        // –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        setupNumericField(entryPrice1Field, "104586.00");
        setupNumericField(entryPrice2Field, "104396.00");
        setupNumericField(entryPrice3Field, "104058.00");

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        addAutoCalculateListeners();
    }

    private void addAutoCalculateListeners() {
        depositField.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
        stopPercentField.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
        desiredAvgPriceField.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
        stopPriceField.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());

        entryPrice1Field.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
        entryPrice2Field.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
        entryPrice3Field.textProperty().addListener((obs, oldVal, newVal) -> autoCalculate());
    }

    private void setupNumericField(TextField field, String placeholder) {
        field.setPromptText(placeholder);
        field.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*[.,]?\\d*")) {
                field.setText(oldValue);
            }
        });
    }

    private void setupButtons() {
        calculateButton.setOnAction(event -> calculateVolumes());
        clearButton.setOnAction(event -> clearAllFields());
    }

    @FXML
    private void quickCalculate() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –¥–ª—è –¢–í–•");

            if (!validateInputs()) {
                return;
            }

            performVolumeCalculation();
            showSuccess("–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Ä–∞—Å—á–µ—Ç–µ", e);
            showError("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞", e.getMessage());
            clearResults();
        }
    }

    @FXML
    private void calculateVolumes() {
        try {
            log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π –¢–í–•");

            if (!validateInputs()) {
                return;
            }

            performVolumeCalculation();
            showSuccess("–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–æ–≤", e);
            showError("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞", e.getMessage());
            clearResults();
        }
    }

    private void autoCalculate() {
        try {
            if (allFieldsFilled()) {
                performVolumeCalculation();
            } else {
                clearResults();
            }
        } catch (Exception e) {
            clearResults();
        }
    }

    private boolean validateInputs() {
        if (!allFieldsFilled()) {
            showError("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
            return false;
        }

        try {
            BigDecimal deposit = parseDecimal(depositField.getText());
            BigDecimal stopPercent = parseDecimal(stopPercentField.getText());
            BigDecimal desiredAvgPrice = parseDecimal(desiredAvgPriceField.getText());
            BigDecimal stopPrice = parseDecimal(stopPriceField.getText());

            BigDecimal entryPrice1 = parseDecimal(entryPrice1Field.getText());
            BigDecimal entryPrice2 = parseDecimal(entryPrice2Field.getText());
            BigDecimal entryPrice3 = parseDecimal(entryPrice3Field.getText());

            boolean isLong = longRadioButton.isSelected();

            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            if (deposit.compareTo(BigDecimal.ZERO) <= 0) {
                showError("–û—à–∏–±–∫–∞", "–î–µ–ø–æ–∑–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                return false;
            }

            if (stopPercent.compareTo(BigDecimal.ZERO) <= 0) {
                showError("–û—à–∏–±–∫–∞", "–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Long –ø–æ–∑–∏—Ü–∏–π
            if (isLong) {
                if (desiredAvgPrice.compareTo(stopPrice) <= 0) {
                    showError("–û—à–∏–±–∫–∞", "–î–ª—è Long –ø–æ–∑–∏—Ü–∏–∏ –∂–µ–ª–∞–µ–º–∞—è –¢–í–• –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞");
                    return false;
                }

                if (entryPrice1.compareTo(stopPrice) <= 0 ||
                        entryPrice2.compareTo(stopPrice) <= 0 ||
                        entryPrice3.compareTo(stopPrice) <= 0) {
                    showError("–û—à–∏–±–∫–∞", "–î–ª—è Long –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞");
                    return false;
                }
            } else {
                // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Short –ø–æ–∑–∏—Ü–∏–π
                if (desiredAvgPrice.compareTo(stopPrice) >= 0) {
                    showError("–û—à–∏–±–∫–∞", "–î–ª—è Short –ø–æ–∑–∏—Ü–∏–∏ –∂–µ–ª–∞–µ–º–∞—è –¢–í–• –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞");
                    return false;
                }

                if (entryPrice1.compareTo(stopPrice) >= 0 ||
                        entryPrice2.compareTo(stopPrice) >= 0 ||
                        entryPrice3.compareTo(stopPrice) >= 0) {
                    showError("–û—à–∏–±–∫–∞", "–î–ª—è Short –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞");
                    return false;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–µ–ª–∞–µ–º–∞—è –¢–í–• –¥–æ—Å—Ç–∏–∂–∏–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –≤—Ö–æ–¥–∞
            BigDecimal minPrice = entryPrice1.min(entryPrice2).min(entryPrice3);
            BigDecimal maxPrice = entryPrice1.max(entryPrice2).max(entryPrice3);

            if (desiredAvgPrice.compareTo(minPrice) < 0 || desiredAvgPrice.compareTo(maxPrice) > 0) {
                showError("–û—à–∏–±–∫–∞",
                        String.format("–ñ–µ–ª–∞–µ–º–∞—è –¢–í–• (%.2f) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (%.2f) –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π (%.2f) —Ü–µ–Ω–æ–π –≤—Ö–æ–¥–∞",
                                desiredAvgPrice.doubleValue(), minPrice.doubleValue(), maxPrice.doubleValue()));
                return false;
            }

        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è");
            return false;
        }

        return true;
    }

    private void performVolumeCalculation() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        BigDecimal deposit = parseDecimal(depositField.getText());            // D
        BigDecimal stopPercent = parseDecimal(stopPercentField.getText());   // R
        BigDecimal desiredAvgPrice = parseDecimal(desiredAvgPriceField.getText()); // TVX
        BigDecimal stopPrice = parseDecimal(stopPriceField.getText());       // p_stop

        BigDecimal entryPrice1 = parseDecimal(entryPrice1Field.getText());   // p1
        BigDecimal entryPrice2 = parseDecimal(entryPrice2Field.getText());   // p2
        BigDecimal entryPrice3 = parseDecimal(entryPrice3Field.getText());   // p3

        boolean isLong = longRadioButton.isSelected();

        log.info("=== –†–ê–°–ß–ï–¢ –ü–û –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –§–û–†–ú–£–õ–ï ===");
        log.info("–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: {}", isLong ? "LONG" : "SHORT");
        log.info("–î–µ–ø–æ–∑–∏—Ç D = {}", deposit);
        log.info("–†–∏—Å–∫ R = {}%", stopPercent);
        log.info("–ñ–µ–ª–∞–µ–º–∞—è –¢–í–• = {}", desiredAvgPrice);
        log.info("–°—Ç–æ–ø-—Ü–µ–Ω–∞ = {}", stopPrice);
        log.info("–¶–µ–Ω—ã –≤—Ö–æ–¥–∞: p1={}, p2={}, p3={}", entryPrice1, entryPrice2, entryPrice3);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
        if (isLong) {
            // –î–ª—è LONG: —Å—Ç–æ–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            if (stopPrice.compareTo(desiredAvgPrice) >= 0) {
                log.error("–î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω–∞ ({}) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ ({})",
                        stopPrice, desiredAvgPrice);
                showError("–û—à–∏–±–∫–∞", "–î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞");
                return;
            }
        } else {
            // –î–ª—è SHORT: —Å—Ç–æ–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            if (stopPrice.compareTo(desiredAvgPrice) <= 0) {
                log.error("–î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω–∞ ({}) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ ({})",
                        stopPrice, desiredAvgPrice);
                showError("–û—à–∏–±–∫–∞", "–î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ø-—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞");
                return;
            }
        }

        // –®–ê–ì 1: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
        // –î–ª—è LONG:  V = (D √ó R/100) / (TVX - p_stop)
        // –î–ª—è SHORT: V = (D √ó R/100) / (p_stop - TVX)
        BigDecimal maxLossAmount = deposit.multiply(stopPercent).divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP);

        BigDecimal totalVolume; // V = v1 + v2 + v3 (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∞–∫—Ç–∏–≤–∞)
        if (isLong) {
            totalVolume = maxLossAmount.divide(desiredAvgPrice.subtract(stopPrice), 8, RoundingMode.HALF_UP);
        } else {
            totalVolume = maxLossAmount.divide(stopPrice.subtract(desiredAvgPrice), 8, RoundingMode.HALF_UP);
        }

        log.info("–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ V = {} –µ–¥–∏–Ω–∏—Ü –∞–∫—Ç–∏–≤–∞", totalVolume);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∏–π –æ–±—ä–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if (totalVolume.compareTo(BigDecimal.ZERO) <= 0) {
            log.error("–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–∏–ª—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º: {}", totalVolume);
            showError("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–∏");
            return;
        }

        // –®–ê–ì 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤
        // –í—ã–±–∏—Ä–∞–µ–º v1 –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞)
        BigDecimal v1 = totalVolume.multiply(BigDecimal.valueOf(0.3));

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º v2 –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
        // v2 = ((TVX - p3) √ó V - (p1 - p3) √ó v1) / (p2 - p3)
        BigDecimal numerator = desiredAvgPrice.subtract(entryPrice3).multiply(totalVolume)
                .subtract(entryPrice1.subtract(entryPrice3).multiply(v1));
        BigDecimal denominator = entryPrice2.subtract(entryPrice3);

        BigDecimal v2;
        BigDecimal v3;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è
        if (denominator.abs().compareTo(BigDecimal.valueOf(0.0001)) < 0) {
            log.warn("–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å (p2-p3) –±–ª–∏–∑–æ–∫ –∫ –Ω—É–ª—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ");
            v1 = totalVolume.divide(BigDecimal.valueOf(3), 8, RoundingMode.HALF_UP);
            v2 = totalVolume.divide(BigDecimal.valueOf(3), 8, RoundingMode.HALF_UP);
            v3 = totalVolume.subtract(v1).subtract(v2);
        } else {
            v2 = numerator.divide(denominator, 8, RoundingMode.HALF_UP);
            v3 = totalVolume.subtract(v1).subtract(v2);

            // –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if (v1.compareTo(BigDecimal.ZERO) < 0 || v2.compareTo(BigDecimal.ZERO) < 0 || v3.compareTo(BigDecimal.ZERO) < 0) {
                log.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã: v1={}, v2={}, v3={}", v1, v2, v3);

                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è v1 –æ—Ç 10% –¥–æ 80%
                boolean foundPositive = false;
                for (double factor = 0.1; factor <= 0.8; factor += 0.1) {
                    v1 = totalVolume.multiply(BigDecimal.valueOf(factor));

                    numerator = desiredAvgPrice.subtract(entryPrice3).multiply(totalVolume)
                            .subtract(entryPrice1.subtract(entryPrice3).multiply(v1));
                    v2 = numerator.divide(denominator, 8, RoundingMode.HALF_UP);
                    v3 = totalVolume.subtract(v1).subtract(v2);

                    if (v1.compareTo(BigDecimal.ZERO) >= 0 &&
                            v2.compareTo(BigDecimal.ZERO) >= 0 &&
                            v3.compareTo(BigDecimal.ZERO) >= 0) {
                        log.info("–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å v1 = {}% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞", factor * 100);
                        foundPositive = true;
                        break;
                    }
                }

                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                if (!foundPositive) {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ");
                    v1 = totalVolume.divide(BigDecimal.valueOf(3), 8, RoundingMode.HALF_UP);
                    v2 = totalVolume.divide(BigDecimal.valueOf(3), 8, RoundingMode.HALF_UP);
                    v3 = totalVolume.subtract(v1).subtract(v2);
                }
            }
        }

        log.info("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: v1={}, v2={}, v3={}", v1, v2, v3);

        // –®–ê–ì 3: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º—ã –≤ USDT –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        BigDecimal usdtVolume1 = v1.multiply(entryPrice1);
        BigDecimal usdtVolume2 = v2.multiply(entryPrice2);
        BigDecimal usdtVolume3 = v3.multiply(entryPrice3);
        BigDecimal totalUsdtVolume = usdtVolume1.add(usdtVolume2).add(usdtVolume3);

        // –®–ê–ì 4: –ü–†–û–í–ï–†–Ø–ï–ú –¢–û–ß–ù–û–°–¢–¨ –†–ê–°–ß–ï–¢–û–í

        // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è TVX)
        BigDecimal actualAvgPrice = entryPrice1.multiply(v1)
                .add(entryPrice2.multiply(v2))
                .add(entryPrice3.multiply(v3))
                .divide(totalVolume, 8, RoundingMode.HALF_UP);

        // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–æ–ø–∞
        BigDecimal actualLoss;
        if (isLong) {
            // –î–ª—è LONG: –ø–æ—Ç–µ—Ä—è = (—Å—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ - —Å—Ç–æ–ø_—Ü–µ–Ω–∞) √ó –æ–±—ä–µ–º
            actualLoss = actualAvgPrice.subtract(stopPrice).multiply(totalVolume);
        } else {
            // –î–ª—è SHORT: –ø–æ—Ç–µ—Ä—è = (—Å—Ç–æ–ø_—Ü–µ–Ω–∞ - —Å—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞) √ó –æ–±—ä–µ–º
            actualLoss = stopPrice.subtract(actualAvgPrice).multiply(totalVolume);
        }

        // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
        BigDecimal actualRiskPercent = actualLoss.divide(deposit, 8, RoundingMode.HALF_UP)
                .multiply(BigDecimal.valueOf(100));

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        BigDecimal weight1 = v1.divide(totalVolume, 8, RoundingMode.HALF_UP);
        BigDecimal weight2 = v2.divide(totalVolume, 8, RoundingMode.HALF_UP);
        BigDecimal weight3 = v3.divide(totalVolume, 8, RoundingMode.HALF_UP);

        // –®–ê–ì 5: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        displayResults(actualAvgPrice, totalVolume, maxLossAmount, actualRiskPercent,
                usdtVolume1, usdtVolume2, usdtVolume3, totalUsdtVolume,
                weight1, weight2, weight3, isLong);

        // –®–ê–ì 6: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        generateDetailedDescription(deposit, stopPercent, desiredAvgPrice, stopPrice,
                entryPrice1, entryPrice2, entryPrice3,
                usdtVolume1, usdtVolume2, usdtVolume3, totalUsdtVolume,
                v1, v2, v3, totalVolume,
                weight1, weight2, weight3,
                actualAvgPrice, actualLoss, actualRiskPercent, isLong);

        // –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º—É–ª–∞–º
        log.info("=== –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –†–ê–°–ß–ï–¢–û–í ===");

        BigDecimal avgPriceDeviation = desiredAvgPrice.subtract(actualAvgPrice).abs();
        BigDecimal riskDeviation = stopPercent.subtract(actualRiskPercent).abs();

        log.info("–ñ–µ–ª–∞–µ–º–∞—è –¢–í–•: {} | –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¢–í–•: {} | –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {} USDT",
                desiredAvgPrice, actualAvgPrice, avgPriceDeviation);
        log.info("–ó–∞–¥–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: {}% | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: {}% | –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {}%",
                stopPercent, actualRiskPercent, riskDeviation);
        log.info("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è: {} USDT | –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è: {} USDT",
                maxLossAmount, actualLoss);

        // –ü–†–û–í–ï–†–Ø–ï–ú –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø

        // –£—Å–ª–æ–≤–∏–µ 1: –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è TVX
        // (p1√óv1 + p2√óv2 + p3√óv3) / (v1+v2+v3) = TVX
        BigDecimal condition1Left = entryPrice1.multiply(v1).add(entryPrice2.multiply(v2)).add(entryPrice3.multiply(v3));
        BigDecimal condition1Right = desiredAvgPrice.multiply(totalVolume);
        boolean condition1Met = condition1Left.subtract(condition1Right).abs().compareTo(BigDecimal.valueOf(0.01)) < 0;
        log.info("–£—Å–ª–æ–≤–∏–µ 1 (–¢–í–•): {} ‚âà {} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {}", condition1Left, condition1Right, condition1Met);

        // –£—Å–ª–æ–≤–∏–µ 2: –ü–æ—Ç–µ—Ä—è –ø—Ä–∏ —Å—Ç–æ–ø–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Ç–µ—Ä–µ
        // –î–ª—è LONG:  (TVX - p_stop) √ó V = D √ó R/100
        // –î–ª—è SHORT: (p_stop - TVX) √ó V = D √ó R/100
        boolean condition2Met = actualLoss.subtract(maxLossAmount).abs().compareTo(BigDecimal.valueOf(0.01)) < 0;
        log.info("–£—Å–ª–æ–≤–∏–µ 2 (—Ä–∏—Å–∫): {} ‚âà {} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {}", actualLoss, maxLossAmount, condition2Met);

        // –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (condition1Met && condition2Met) {
            log.info("‚úÖ –í–°–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´");
        } else {
            log.warn("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–´");
        }

        log.info("=== –ò–¢–û–ì–û–í–´–ï –û–ë–™–ï–ú–´ –í USDT ===");
        log.info("1-—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ({} USDT): {} USDT ({} –µ–¥–∏–Ω–∏—Ü)", entryPrice1, usdtVolume1, v1);
        log.info("2-—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ({} USDT): {} USDT ({} –µ–¥–∏–Ω–∏—Ü)", entryPrice2, usdtVolume2, v2);
        log.info("3-—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ({} USDT): {} USDT ({} –µ–¥–∏–Ω–∏—Ü)", entryPrice3, usdtVolume3, v3);
        log.info("–ò–¢–û–ì–û: {} USDT ({} –µ–¥–∏–Ω–∏—Ü –∞–∫—Ç–∏–≤–∞)", totalUsdtVolume, totalVolume);
    }


    private void displayResults(BigDecimal actualAvgPrice, BigDecimal totalCoins, BigDecimal maxLossAmount, BigDecimal actualRiskPercent,
                                BigDecimal volume1, BigDecimal volume2, BigDecimal volume3, BigDecimal totalVolume,
                                BigDecimal weight1, BigDecimal weight2, BigDecimal weight3, boolean isLong) {

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        calculatedAvgPriceLabel.setText(NumberFormatUtil.formatNumber(actualAvgPrice, 2) + " USDT");
        totalCoinsLabel.setText(NumberFormatUtil.formatNumber(totalCoins, 6));
        maxLossAmountLabel.setText(NumberFormatUtil.formatNumber(maxLossAmount, 2) + " USDT");
        actualRiskPercentLabel.setText(NumberFormatUtil.formatPercentage(actualRiskPercent) + " –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞");

        // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≤–µ—Å–∞
        weight1Label.setText(NumberFormatUtil.formatPercentage(weight1.multiply(BigDecimal.valueOf(100))));
        weight2Label.setText(NumberFormatUtil.formatPercentage(weight2.multiply(BigDecimal.valueOf(100))));
        weight3Label.setText(NumberFormatUtil.formatPercentage(weight3.multiply(BigDecimal.valueOf(100))));

        // –ì–õ–ê–í–ù–û–ï: –û–±—ä–µ–º—ã –¥–ª—è –≤—Ö–æ–¥–æ–≤
        volume1Label.setText(NumberFormatUtil.formatNumber(volume1, 2) + " USDT");
        volume2Label.setText(NumberFormatUtil.formatNumber(volume2, 2) + " USDT");
        volume3Label.setText(NumberFormatUtil.formatNumber(volume3, 2) + " USDT");
        totalVolumeLabel.setText(NumberFormatUtil.formatNumber(totalVolume, 2) + " USDT");

        // –°—Ç–∏–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
        String typeColor = isLong ? "#27ae60" : "#e74c3c";

        calculatedAvgPriceLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #3498db;");
        totalCoinsLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: " + typeColor + ";");
        maxLossAmountLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #e74c3c;");
        actualRiskPercentLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #9b59b6;");

        volume1Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #2c3e50; -fx-background-color: #e8f4f8; -fx-background-radius: 6; -fx-padding: 8;");
        volume2Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #2c3e50; -fx-background-color: #fff3e0; -fx-background-radius: 6; -fx-padding: 8;");
        volume3Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #2c3e50; -fx-background-color: #ffebee; -fx-background-radius: 6; -fx-padding: 8;");
        totalVolumeLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: " + typeColor + "; -fx-background-color: #e8f5e8; -fx-background-radius: 6; -fx-padding: 8;");
    }

    private void generateDetailedDescription(BigDecimal deposit, BigDecimal riskPercent,
                                             BigDecimal tvx, BigDecimal stopPrice,
                                             BigDecimal p1, BigDecimal p2, BigDecimal p3,
                                             BigDecimal usdt1, BigDecimal usdt2, BigDecimal usdt3, BigDecimal totalUsdt,
                                             BigDecimal v1, BigDecimal v2, BigDecimal v3, BigDecimal totalVolume,
                                             BigDecimal w1, BigDecimal w2, BigDecimal w3,
                                             BigDecimal actualTVX, BigDecimal actualLoss, BigDecimal actualRisk,
                                             boolean isLong) {

        StringBuilder description = new StringBuilder();

        description.append("üßÆ –†–ê–°–ß–ï–¢ –û–ë–™–ï–ú–û–í –î–õ–Ø –£–°–†–ï–î–ù–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò\n");
        description.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");

        // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        description.append("üìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:\n");
        description.append(String.format("‚Ä¢ –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏: %s\n", isLong ? "LONG (–ø–æ–∫—É–ø–∫–∞)" : "SHORT (–ø—Ä–æ–¥–∞–∂–∞)"));
        description.append(String.format("‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: %s USDT\n", deposit));
        description.append(String.format("‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫: %s%%\n", riskPercent));
        description.append(String.format("‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –¢–í–•: %s USDT\n", tvx));
        description.append(String.format("‚Ä¢ –°—Ç–æ–ø-—Ü–µ–Ω–∞: %s USDT\n", stopPrice));
        description.append(String.format("‚Ä¢ –¶–µ–Ω—ã –≤—Ö–æ–¥–∞: %s, %s, %s USDT\n\n", p1, p2, p3));

        // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
        description.append("üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢:\n");
        description.append(String.format("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è = %s √ó %s%% = %s USDT\n",
                deposit, riskPercent, deposit.multiply(riskPercent.divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP))));

        if (isLong) {
            description.append(String.format("–û–±—â–∏–π –æ–±—ä–µ–º = %s √∑ (%s - %s) = %s –µ–¥–∏–Ω–∏—Ü\n\n",
                    deposit.multiply(riskPercent.divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP)),
                    tvx, stopPrice, totalVolume));
        } else {
            description.append(String.format("–û–±—â–∏–π –æ–±—ä–µ–º = %s √∑ (%s - %s) = %s –µ–¥–∏–Ω–∏—Ü\n\n",
                    deposit.multiply(riskPercent.divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP)),
                    stopPrice, tvx, totalVolume));
        }

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
        description.append("üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ë–™–ï–ú–û–í –ü–û –¢–û–ß–ö–ê–ú –í–•–û–î–ê:\n");
        description.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n");
        description.append("‚îÇ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÇ –¶–µ–Ω–∞ (USDT)    ‚îÇ –û–±—ä–µ–º (USDT)   ‚îÇ –í–µ—Å (%)  ‚îÇ\n");
        description.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n");
        description.append(String.format("‚îÇ 1-—è —Ç–æ—á–∫–∞   ‚îÇ %14.2f ‚îÇ %14.2f ‚îÇ %7.1f%% ‚îÇ\n",
                p1, usdt1, w1.multiply(BigDecimal.valueOf(100))));
        description.append(String.format("‚îÇ 2-—è —Ç–æ—á–∫–∞   ‚îÇ %14.2f ‚îÇ %14.2f ‚îÇ %7.1f%% ‚îÇ\n",
                p2, usdt2, w2.multiply(BigDecimal.valueOf(100))));
        description.append(String.format("‚îÇ 3-—è —Ç–æ—á–∫–∞   ‚îÇ %14.2f ‚îÇ %14.2f ‚îÇ %7.1f%% ‚îÇ\n",
                p3, usdt3, w3.multiply(BigDecimal.valueOf(100))));
        description.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n");
        description.append(String.format("–ò–¢–û–ì–û: %s USDT (%s –µ–¥–∏–Ω–∏—Ü –∞–∫—Ç–∏–≤–∞)\n\n", totalUsdt, totalVolume));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        description.append("‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:\n");
        description.append(String.format("‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –¢–í–•: %s USDT\n", tvx));
        description.append(String.format("‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¢–í–•: %s USDT\n", actualTVX));
        description.append(String.format("‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¢–í–•: %s USDT\n", tvx.subtract(actualTVX).abs()));
        description.append(String.format("‚Ä¢ –ó–∞–¥–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: %s%%\n", riskPercent));
        description.append(String.format("‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: %s%%\n", actualRisk));
        description.append(String.format("‚Ä¢ –ü–æ—Ç–µ—Ä—è –ø—Ä–∏ —Å—Ç–æ–ø–µ: %s USDT\n\n", actualLoss));

        // –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        description.append("üìã –¢–û–†–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:\n");
        if (isLong) {
            description.append("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏:\n");
            description.append(String.format("1. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ %s USDT\n", p1, usdt1));
            description.append(String.format("2. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ %s USDT\n", p2, usdt2));
            description.append(String.format("3. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ %s USDT\n", p3, usdt3));
            description.append(String.format("4. –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ %s USDT (–ø–æ—Ç–µ—Ä—è %s USDT)\n", stopPrice, actualLoss));
        } else {
            description.append("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏:\n");
            description.append(String.format("1. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø—Ä–æ–¥–∞–µ–º –Ω–∞ %s USDT\n", p1, usdt1));
            description.append(String.format("2. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø—Ä–æ–¥–∞–µ–º –Ω–∞ %s USDT\n", p2, usdt2));
            description.append(String.format("3. –ü—Ä–∏ —Ü–µ–Ω–µ %s USDT –ø—Ä–æ–¥–∞–µ–º –Ω–∞ %s USDT\n", p3, usdt3));
            description.append(String.format("4. –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ %s USDT (–ø–æ—Ç–µ—Ä—è %s USDT)\n", stopPrice, actualLoss));
        }
    }

    private void clearResults() {
        calculatedAvgPriceLabel.setText("0.00 USDT");
        totalCoinsLabel.setText("0.000000");
        maxLossAmountLabel.setText("0.00 USDT");
        actualRiskPercentLabel.setText("0.0%");

        weight1Label.setText("0.0%");
        weight2Label.setText("0.0%");
        weight3Label.setText("0.0%");

        volume1Label.setText("0.00 USDT");
        volume2Label.setText("0.00 USDT");
        volume3Label.setText("0.00 USDT");
        totalVolumeLabel.setText("0.00 USDT");

        // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
        calculatedAvgPriceLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        totalCoinsLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        maxLossAmountLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        actualRiskPercentLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");

        volume1Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        volume2Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        volume3Label.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
        totalVolumeLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #7f8c8d;");
    }

    @FXML
    private void clearAllFields() {
        depositField.clear();
        stopPercentField.clear();
        desiredAvgPriceField.clear();
        stopPriceField.clear();

        entryPrice1Field.clear();
        entryPrice2Field.clear();
        entryPrice3Field.clear();

        longRadioButton.setSelected(true); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ Long –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        updateTradeTypeInfo();
        updatePlaceholders();

        clearResults();
        log.info("–í—Å–µ –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ã");
    }

    private boolean allFieldsFilled() {
        return !depositField.getText().trim().isEmpty() &&
                !stopPercentField.getText().trim().isEmpty() &&
                !desiredAvgPriceField.getText().trim().isEmpty() &&
                !stopPriceField.getText().trim().isEmpty() &&
                !entryPrice1Field.getText().trim().isEmpty() &&
                !entryPrice2Field.getText().trim().isEmpty() &&
                !entryPrice3Field.getText().trim().isEmpty();
    }

    private BigDecimal parseDecimal(String text) {
        if (text == null || text.trim().isEmpty()) {
            throw new IllegalArgumentException("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        try {
            String normalizedText = text.trim().replace(",", ".");
            return new BigDecimal(normalizedText);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + text);
        }
    }

    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("–£—Å–ø–µ—Ö");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showError(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

}

