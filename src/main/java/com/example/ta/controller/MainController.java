
package com.example.ta.controller;

import com.example.ta.config.SpringFXMLLoader;
import com.example.ta.controller.news.NewsPanel;
import com.example.ta.controller.news.NewsSidebarController;
import com.example.ta.controller.trading.TradeDetailsController;
import com.example.ta.controller.trading.TradeFormController;
import com.example.ta.domain.trading.Trade;
import com.example.ta.events.NavigationEvent;
import com.example.ta.repository.NewsMessageRepository;
import com.example.ta.service.MediaDownloadService;
import com.example.ta.service.TelegramNewsService;
import com.example.ta.service.TelegramSettingsService;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.util.Duration;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.ResourceBundle;

@Slf4j
@Component
@RequiredArgsConstructor
public class MainController implements Initializable {

    @FXML
    private Button homeButton;
    @FXML
    private Button tradesListButton;
    @FXML
    private Button addTradeButton;
    @FXML
    private Button statisticsButton;
    @FXML
    private Button positionCalculatorButton;
    @FXML
    private Button averagingCalculatorButton;
    @FXML
    private Button refreshButton;

    @FXML
    private StackPane contentArea;

    @FXML
    private Label statusLabel;
    @FXML
    private Label currentTimeLabel;
    @FXML
    private Label versionLabel;
    @FXML
    private Label userInfoLabel;
    @FXML
    private Label telegramStatusLabel;

    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    @FXML
    private Button toggleNewsButton;
    @FXML
    private VBox newsContainer;

    private final TelegramNewsService telegramNewsService; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø–æ–ª–µ
    private final TelegramSettingsService telegramSettingsService;
    private final SpringFXMLLoader springFXMLLoader;
    private final MediaDownloadService mediaDownloadService;

    private Button currentActiveButton;
    private List<Button> navigationButtons;
    private Timeline timelineTimer;

    private final NewsMessageRepository newsMessageRepository; // ‚ùó –î–û–ë–ê–í–ò–¢–¨
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    private NewsSidebarController newsSidebarController;
    private boolean newsPanelVisible = true;
    private Node currentMainContent;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainController");

        navigationButtons = List.of(homeButton, tradesListButton, addTradeButton,
                statisticsButton, positionCalculatorButton, averagingCalculatorButton);

        setupButtonHoverEffects();
        setupTimeUpdater();
        setupNewsPanel();
        showHome();
        updateStatus("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");

        log.info("MainController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

        updateTelegramStatus();
        Timeline telegramStatusUpdater = new Timeline(new KeyFrame(Duration.seconds(30), e -> updateTelegramStatus()));
        telegramStatusUpdater.setCycleCount(Timeline.INDEFINITE);
        telegramStatusUpdater.play();
    }

    private void setupNewsPanel() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        if (toggleNewsButton != null) {
            toggleNewsButton.setOnAction(e -> toggleNewsPanel());
            toggleNewsButton.setText("üì∞");
            toggleNewsButton.setTooltip(new Tooltip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"));

            // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            String buttonStyle = "-fx-background-color: transparent; -fx-text-fill: #6c757d; " +
                    "-fx-font-size: 16px; -fx-background-radius: 8; -fx-border-color: transparent; " +
                    "-fx-cursor: hand; -fx-padding: 8;";
            toggleNewsButton.setStyle(buttonStyle);

            toggleNewsButton.setOnMouseEntered(e ->
                    toggleNewsButton.setStyle(buttonStyle.replace("transparent", "#e9ecef")));
            toggleNewsButton.setOnMouseExited(e ->
                    toggleNewsButton.setStyle(buttonStyle));
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å
        loadNewsSidebar();
    }

    private void loadNewsSidebar() {
        try {
            FXMLLoader loader = springFXMLLoader.getLoader("/com/example/ta/news-sidebar-view.fxml");
            Node newsSidebarContent = loader.load();
            newsSidebarController = loader.getController();

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            if (newsContainer != null) {
                newsContainer.getChildren().clear();
                newsContainer.getChildren().add(newsSidebarContent);
            }

            log.info("–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", e);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if (newsContainer != null) {
                Label errorLabel = new Label("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π");
                errorLabel.setStyle("-fx-text-fill: #e74c3c; -fx-font-style: italic;");
                newsContainer.getChildren().clear();
                newsContainer.getChildren().add(errorLabel);
            }
        }
    }

    @FXML
    private void toggleNewsPanel() {
        newsPanelVisible = !newsPanelVisible;

        if (newsPanelVisible) {
            if (currentMainContent != null) {
                HBox containerWithNews = createContentWithNews(currentMainContent);
                contentArea.getChildren().clear();
                contentArea.getChildren().add(containerWithNews);
            }

            toggleNewsButton.setTooltip(new Tooltip("–°–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"));

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
            if (newsSidebarController != null) {
                newsSidebarController.forceRefresh();
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if (currentMainContent != null) {
                contentArea.getChildren().clear();
                contentArea.getChildren().add(currentMainContent);
            }

            toggleNewsButton.setTooltip(new Tooltip("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"));
        }

        log.info("–ù–æ–≤–æ—Å—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å {}", newsPanelVisible ? "–ø–æ–∫–∞–∑–∞–Ω–∞" : "—Å–∫—Ä—ã—Ç–∞");
    }

    private void updateTelegramStatus() {
        if (telegramStatusLabel != null && telegramSettingsService != null) {
            try {
                String status = telegramSettingsService.getTelegramStatus();
                String displayText = getTelegramDisplayText(status);
                String style = getTelegramStatusStyle(status);

                telegramStatusLabel.setText(displayText);
                telegramStatusLabel.setStyle(style);

            } catch (Exception e) {
                telegramStatusLabel.setText("üì± Telegram: ‚ùå –û—à–∏–±–∫–∞");
                telegramStatusLabel.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram", e);
            }
        }
    }

    private String getTelegramDisplayText(String status) {
        return switch (status) {
            case "–ê–∫—Ç–∏–≤–Ω–æ" -> "üì± Telegram: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ";
            case "–û—Ç–∫–ª—é—á–µ–Ω–æ" -> "üì± Telegram: ‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ";
            case "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" -> "üì± Telegram: ‚öôÔ∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ";
            case "–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" -> "üì± Telegram: ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏";
            default -> "üì± Telegram: ‚ùì " + status;
        };
    }

    private String getTelegramStatusStyle(String status) {
        return switch (status) {
            case "–ê–∫—Ç–∏–≤–Ω–æ" -> "-fx-text-fill: #27ae60; -fx-font-weight: bold; -fx-font-size: 12px;";
            case "–û—Ç–∫–ª—é—á–µ–Ω–æ" -> "-fx-text-fill: #f39c12; -fx-font-weight: bold; -fx-font-size: 12px;";
            case "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" -> "-fx-text-fill: #95a5a6; -fx-font-weight: normal; -fx-font-size: 12px;";
            case "–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" -> "-fx-text-fill: #e74c3c; -fx-font-weight: normal; -fx-font-size: 12px;";
            default -> "-fx-text-fill: #e74c3c; -fx-font-weight: normal; -fx-font-size: 12px;";
        };
    }

    @FXML
    private void showTelegramSettings() {
        loadContent("/com/example/ta/telegram-settings.fxml");
        setActiveButton(null);
        updateStatus("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram");
    }

    @FXML
    private void showTwitterSettings() {
        loadContent("/com/example/ta/twitter-settings.fxml");
        setActiveButton(null);
        updateStatus("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ X");
    }

    @EventListener
    public void onNavigationEvent(NavigationEvent event) {
        log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {}", event.getNavigationType());

        switch (event.getNavigationType()) {
            case ADD_TRADE -> showAddTrade();
            case VIEW_TRADES -> showTradesList();
            case STATISTICS -> showStatistics();
            case HOME -> showHome();
            case POSITION_CALCULATOR -> showPositionCalculator();
            case VIEW_TRADE_DETAILS -> showTradeDetails(event.getTrade());
            case EDIT_TRADE -> showEditTrade(event.getTrade());
        }
    }

    private void showEditTrade(Trade trade) {
        try {
            log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {}", trade.getId());

            FXMLLoader loader = springFXMLLoader.getLoader("/com/example/ta/trade-form-view.fxml");
            Node content = loader.load();

            TradeFormController controller = loader.getController();
            controller.setEditMode(trade);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–µ–º layout
            currentMainContent = content;
            updateContentArea();

            setActiveButton(addTradeButton);
            updateStatus("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: " + trade.getAssetName());
            log.info("–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: /com/example/ta/trade-form-view.fxml");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private void showTradeDetails(Trade trade) {
        try {
            log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏: {}", trade.getId());

            FXMLLoader loader = springFXMLLoader.getLoader("/com/example/ta/trade-details.fxml");
            Node content = loader.load();

            TradeDetailsController controller = loader.getController();
            controller.setTrade(trade);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–µ–º layout
            currentMainContent = content;
            updateContentArea();

            updateStatus("–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏: " + trade.getAssetName());
            log.info("–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: /com/example/ta/trade-details.fxml");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏: " + e.getMessage());
        }
    }

    private void setupButtonHoverEffects() {
        for (Button button : navigationButtons) {
            if (button == homeButton) continue;

            String inactiveStyle = "-fx-background-color: transparent; -fx-text-fill: #6c757d; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;";
            String hoverStyle = "-fx-background-color: #e9ecef; -fx-text-fill: #495057; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;";

            button.setOnMouseEntered(e -> {
                if (button != currentActiveButton) {
                    button.setStyle(hoverStyle);
                }
            });

            button.setOnMouseExited(e -> {
                if (button != currentActiveButton) {
                    button.setStyle(inactiveStyle);
                }
            });
        }

        homeButton.setOnMouseEntered(e -> {
            if (homeButton != currentActiveButton) {
                homeButton.setStyle("-fx-background-color: #2980b9; -fx-text-fill: white; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20; -fx-effect: dropshadow(gaussian, rgba(52,152,219,0.2), 4, 0, 0, 1);");
            }
        });
        homeButton.setOnMouseExited(e -> {
            if (homeButton != currentActiveButton) {
                homeButton.setStyle("-fx-background-color: transparent; -fx-text-fill: #6c757d; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;");
            }
        });

        refreshButton.setOnMouseEntered(e ->
                refreshButton.setStyle("-fx-background-color: #e9ecef; -fx-text-fill: #495057; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;"));
        refreshButton.setOnMouseExited(e ->
                refreshButton.setStyle("-fx-background-color: transparent; -fx-text-fill: #6c757d; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;"));
    }

    private void setupTimeUpdater() {
        timelineTimer = new Timeline(new KeyFrame(Duration.seconds(1), e -> updateCurrentTime()));
        timelineTimer.setCycleCount(Timeline.INDEFINITE);
        timelineTimer.play();

        updateCurrentTime();
    }

    private void updateCurrentTime() {
        String currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
        currentTimeLabel.setText(currentTime);
    }

    private void setActiveButton(Button activeButton) {
        String inactiveStyle = "-fx-background-color: transparent; -fx-text-fill: #6c757d; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20;";
        String activeStyle = "-fx-background-color: #3498db; -fx-text-fill: white; -fx-font-size: 13px; -fx-font-weight: 600; -fx-background-radius: 12; -fx-border-color: transparent; -fx-cursor: hand; -fx-padding: 12 20 12 20; -fx-effect: dropshadow(gaussian, rgba(52,152,219,0.2), 4, 0, 0, 1);";

        for (Button button : navigationButtons) {
            if (button == activeButton) {
                button.setStyle(activeStyle);
            } else {
                button.setStyle(inactiveStyle);
            }
        }

        currentActiveButton = activeButton;
    }

    private void loadContent(String fxmlPath) {
        try {
            Node content = springFXMLLoader.load(fxmlPath);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            currentMainContent = content;
            updateContentArea();

            log.info("–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {}", fxmlPath);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {}", fxmlPath, e);
            updateStatus("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + fxmlPath);
        }
    }

    private void updateContentArea() {
        contentArea.getChildren().clear();

        if (currentMainContent != null) {
            if (newsPanelVisible) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª—å—é
                HBox containerWithNews = createContentWithNews(currentMainContent);
                contentArea.getChildren().add(containerWithNews);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                contentArea.getChildren().add(currentMainContent);
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–ª–µ–≤–∞ –∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª—å—é —Å–ø—Ä–∞–≤–∞
     */
    private HBox createContentWithNews(Node mainContent) {
        HBox container = new HBox();
        container.setSpacing(10);
        container.setPadding(new Insets(10));

        HBox.setHgrow(mainContent, Priority.ALWAYS);

        NewsPanel newsPanel = new NewsPanel(telegramNewsService, newsMessageRepository, mediaDownloadService);

        container.getChildren().addAll(mainContent, newsPanel);
        return container;
    }



    @FXML
    private void showHome() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É");
        setActiveButton(homeButton);
        loadContent("/com/example/ta/welcome-page.fxml");
        updateStatus("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
    }

    @FXML
    private void showTradesList() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫");
        setActiveButton(tradesListButton);
        loadContent("/com/example/ta/trades-list-view.fxml");
        updateStatus("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫");
    }

    @FXML
    private void showAddTrade() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏");
        setActiveButton(addTradeButton);
        loadContent("/com/example/ta/trade-form-view.fxml");
        updateStatus("–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏");
    }

    @FXML
    private void showStatistics() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
        setActiveButton(statisticsButton);
        loadContent("/com/example/ta/statistics-dashboard.fxml");
        updateStatus("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤");
    }

    @FXML
    private void showPositionCalculator() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏");
        setActiveButton(positionCalculatorButton);
        loadContent("/com/example/ta/position-calculator.fxml");
        updateStatus("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏");
    }

    @FXML
    private void showAveragingCalculator() {
        log.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");
        setActiveButton(averagingCalculatorButton);
        loadContent("/com/example/ta/averaging-calculator.fxml");
        updateStatus("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏");
    }

    @FXML
    private void refreshCurrentView() {
        log.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥");

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å
        if (newsSidebarController != null) {
            newsSidebarController.forceRefresh();
        }

        if (currentActiveButton == homeButton) {
            showHome();
        } else if (currentActiveButton == tradesListButton) {
            showTradesList();
        } else if (currentActiveButton == addTradeButton) {
            showAddTrade();
        } else if (currentActiveButton == statisticsButton) {
            showStatistics();
        } else if (currentActiveButton == positionCalculatorButton) {
            showPositionCalculator();
        } else if (currentActiveButton == averagingCalculatorButton) {
            showAveragingCalculator();
        }

        updateStatus("–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω");
    }

    private void updateStatus(String message) {
        statusLabel.setText(message);
        log.debug("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {}", message);
    }

    public void navigateToAddTrade() {
        showAddTrade();
    }

    public void navigateToTradesList() {
        showTradesList();
    }

    public void navigateToStatistics() {
        showStatistics();
    }

    public void navigateToPositionCalculator() {
        showPositionCalculator();
    }

    public void navigateToAveragingCalculator() {
        showAveragingCalculator();
    }

    public void updateStatusFromExternal(String message) {
        updateStatus(message);
    }

    public void shutdown() {
        if (timelineTimer != null) {
            timelineTimer.stop();
        }
        if (newsSidebarController != null) {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ shutdown –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        log.info("MainController –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–û—à–∏–±–∫–∞");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}