package com.example.ta.controller;

import com.example.ta.events.NavigationEvent;
import com.example.ta.events.TradeDataChangedEvent;
import com.example.ta.domain.Currency;
import com.example.ta.domain.Trade;
import com.example.ta.domain.TradeStatus;
import com.example.ta.domain.TradeType;
import com.example.ta.service.TradeService;
import com.example.ta.util.DateTimeMaskFormatter;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ResourceBundle;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradeFormController implements Initializable {

    @FXML private Label titleLabel;
    @FXML private TextField assetNameField;
    @FXML private ComboBox<TradeType> tradeTypeComboBox;
    @FXML private ComboBox<TradeStatus> statusComboBox;
    @FXML private ComboBox<Currency> currencyComboBox;
    @FXML private DatePicker tradeDatePicker;
    @FXML private TextField entryPointField;
    @FXML private TextField exitPointField;
    @FXML private TextField takeProfitTargetField; // –ù–û–í–û–ï –ü–û–õ–ï
    @FXML private TextField volumeField;
    @FXML private TextField profitLossField;
    @FXML private TextField entryTimeField;
    @FXML private TextField exitTimeField;
    @FXML private TextArea entryReasonArea;
    @FXML private TextArea exitReasonArea;
    @FXML private TextArea notesArea;

    @FXML private Button saveButton;
    @FXML private Button cancelButton;
    @FXML private Button clearButton;

    private final TradeService tradeService;
    private final ApplicationEventPublisher eventPublisher;

    private Trade editingTrade;
    private boolean isEditMode = false;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TradeFormController");
        setupForm();
        setupValidation();
        setupExitTimeStatusListener();
        setCreateMode();

        log.debug("TradeFormController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    private void setupForm() {
        tradeTypeComboBox.setItems(FXCollections.observableArrayList(TradeType.values()));
        statusComboBox.setItems(FXCollections.observableArrayList(TradeStatus.values()));
        currencyComboBox.setItems(FXCollections.observableArrayList(Currency.values()));

        DateTimeMaskFormatter.applyMask(entryTimeField);
        DateTimeMaskFormatter.applyMask(exitTimeField);

        setupDateTimeBinding();

        profitLossField.setEditable(false);

        entryPointField.textProperty().addListener((obs, oldVal, newVal) -> calculateProfitLoss());
        exitPointField.textProperty().addListener((obs, oldVal, newVal) -> calculateProfitLoss());
        volumeField.textProperty().addListener((obs, oldVal, newVal) -> calculateProfitLoss());
        tradeTypeComboBox.valueProperty().addListener((obs, oldVal, newVal) -> calculateProfitLoss());

        // –ù–û–í–´–ï –°–õ–£–®–ê–¢–ï–õ–ò –¥–ª—è Take Profit Target
        takeProfitTargetField.textProperty().addListener((obs, oldVal, newVal) -> calculatePotentialProfit());
        entryPointField.textProperty().addListener((obs, oldVal, newVal) -> calculatePotentialProfit());
        volumeField.textProperty().addListener((obs, oldVal, newVal) -> calculatePotentialProfit());
        tradeTypeComboBox.valueProperty().addListener((obs, oldVal, newVal) -> calculatePotentialProfit());
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–æ —Ü–µ–ª–∏ Take Profit
     */
    private void calculatePotentialProfit() {
        try {
            String entryPriceText = entryPointField.getText();
            String targetPriceText = takeProfitTargetField.getText();
            String volumeText = volumeField.getText();
            TradeType tradeType = tradeTypeComboBox.getValue();

            if (entryPriceText == null || entryPriceText.trim().isEmpty() ||
                    targetPriceText == null || targetPriceText.trim().isEmpty() ||
                    volumeText == null || volumeText.trim().isEmpty() ||
                    tradeType == null) {
                takeProfitTargetField.setTooltip(null);
                return;
            }

            BigDecimal entryPrice = parseDecimal(entryPriceText);
            BigDecimal targetPrice = parseDecimal(targetPriceText);
            BigDecimal volume = parseDecimal(volumeText);

            if (entryPrice == null || targetPrice == null || volume == null ||
                    entryPrice.compareTo(BigDecimal.ZERO) <= 0 ||
                    targetPrice.compareTo(BigDecimal.ZERO) <= 0 ||
                    volume.compareTo(BigDecimal.ZERO) <= 0) {
                takeProfitTargetField.setTooltip(null);
                return;
            }

            BigDecimal priceDifference;
            boolean isValidTarget = false;

            if (tradeType == TradeType.LONG) {
                priceDifference = targetPrice.subtract(entryPrice);
                isValidTarget = targetPrice.compareTo(entryPrice) > 0;
            } else {
                priceDifference = entryPrice.subtract(targetPrice);
                isValidTarget = targetPrice.compareTo(entryPrice) < 0;
            }

            BigDecimal potentialProfit = priceDifference.multiply(volume);
            BigDecimal percentageMove = priceDifference.divide(entryPrice, 4, BigDecimal.ROUND_HALF_UP).multiply(BigDecimal.valueOf(100));

            if (isValidTarget && potentialProfit.compareTo(BigDecimal.ZERO) > 0) {
                String tooltipText = String.format(
                        "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $%.2f\nüìä –î–≤–∏–∂–µ–Ω–∏–µ: %.2f%%",
                        potentialProfit, percentageMove
                );
                takeProfitTargetField.setTooltip(new Tooltip(tooltipText));

                log.debug("–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ —Ü–µ–ª–∏: ${} ({}%)",
                        String.format("%.2f", potentialProfit),
                        String.format("%.2f", percentageMove));
            } else {
                String errorText = tradeType == TradeType.LONG ?
                        "‚ö†Ô∏è –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–Ω–≥–∞" :
                        "‚ö†Ô∏è –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–ª—è —à–æ—Ä—Ç–∞";
                takeProfitTargetField.setTooltip(new Tooltip(errorText));
            }

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏: {}", e.getMessage());
            takeProfitTargetField.setTooltip(null);
        }
    }


    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    private void setupExitTimeStatusListener() {
        exitTimeField.textProperty().addListener((observable, oldValue, newValue) -> {
            log.debug("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞: '{}' -> '{}'", oldValue, newValue);

            if (newValue != null && !newValue.trim().isEmpty()) {
                try {
                    LocalDateTime exitTime = parseDateTime(newValue);

                    if (exitTime != null) {
                        if (statusComboBox.getValue() != TradeStatus.CLOSED) {
                            Platform.runLater(() -> {
                                statusComboBox.setValue(TradeStatus.CLOSED);
                                log.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å CLOSED –∏–∑-–∑–∞ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞: {}", newValue);

                                showStatusChangeNotification("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–ê–ö–†–´–¢–ê' –∏–∑-–∑–∞ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞");
                            });
                        }
                    }
                } catch (Exception e) {
                    log.debug("–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {}", newValue);
                }
            } else {
                if (!isEditMode && statusComboBox.getValue() == TradeStatus.CLOSED) {
                    Platform.runLater(() -> {
                        statusComboBox.setValue(TradeStatus.OPEN);
                        log.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å OPEN –∏–∑-–∑–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞");

                        showStatusChangeNotification("–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û–¢–ö–†–´–¢–ê' –∏–∑-–∑–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞");
                    });
                }
            }
        });

        exitPointField.textProperty().addListener((observable, oldValue, newValue) -> {
            calculateProfitLoss();
        });
    }

    private void showStatusChangeNotification(String message) {
        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {}", message);
    }

    private void setupDateTimeBinding() {
        tradeDatePicker.valueProperty().addListener((obs, oldDate, newDate) -> {
            if (newDate != null) {
                String currentTimeText = entryTimeField.getText();
                String timeOnly = "09:00";

                if (currentTimeText != null && currentTimeText.contains(" ")) {
                    String[] parts = currentTimeText.split(" ");
                    if (parts.length > 1) {
                        timeOnly = parts[1];
                    }
                } else if (currentTimeText != null && currentTimeText.matches("\\d{2}:\\d{2}")) {
                    timeOnly = currentTimeText;
                }

                String newDateTime = newDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + " " + timeOnly;

                entryTimeField.setText(newDateTime);

                log.debug("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞: {} –¥–ª—è –¥–∞—Ç—ã: {}",
                        newDateTime, newDate);
            }
        });

        entryTimeField.textProperty().addListener((obs, oldText, newText) -> {
            validateDateTimeField(entryTimeField, newText);
        });

        exitTimeField.textProperty().addListener((obs, oldText, newText) -> {
            validateDateTimeField(exitTimeField, newText);
        });
    }

    private void validateDateTimeField(TextField field, String text) {
        if (text == null || text.trim().isEmpty()) {
            field.setStyle("");
            return;
        }

        if (text.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}")) {
            try {
                LocalDateTime.parse(text, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
                field.setStyle("-fx-border-color: #27ae60; -fx-border-width: 1px;");
            } catch (Exception e) {
                field.setStyle("-fx-border-color: #e74c3c; -fx-border-width: 1px;");
            }
        } else {
            field.setStyle("-fx-border-color: #f39c12; -fx-border-width: 1px;");
        }
    }

    private void setupValidation() {
        setupNumericField(entryPointField);
        setupNumericField(exitPointField);
        setupNumericField(takeProfitTargetField); // –ù–û–í–û–ï –ü–û–õ–ï
        setupNumericField(volumeField);
    }

    private void setupNumericField(TextField field) {
        field.textProperty().addListener((observable, oldValue, newValue) -> {
            if (!newValue.matches("\\d*(\\.\\d*)?")) {
                field.setText(oldValue);
            }
        });
    }

    public void setCreateMode() {
        log.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏");

        this.isEditMode = false;
        this.editingTrade = null;

        titleLabel.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É");

        clearForm();

        setDefaultValues();

        saveButton.setText("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É");
        saveButton.setDisable(false);
    }

    private void setDefaultValues() {
        try {
            log.debug("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏");

            currencyComboBox.setValue(Currency.USD);

            statusComboBox.setValue(TradeStatus.OPEN);

            tradeTypeComboBox.setValue(TradeType.LONG);

            volumeField.setText("1.0");

            Platform.runLater(() -> {
                tradeDatePicker.setValue(LocalDate.now());

                assetNameField.requestFocus();
            });

            log.debug("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {}", e.getMessage(), e);
        }
    }

    public void setEditMode(Trade trade) {
        this.isEditMode = true;
        this.editingTrade = trade;
        titleLabel.setText("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: " + trade.getAssetName());
        saveButton.setText("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
        fillFormWithTradeData(trade);
        log.info("–§–æ—Ä–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏: {}", trade.getId());
    }

    private void fillFormWithTradeData(Trade trade) {
        assetNameField.setText(trade.getAssetName());
        tradeTypeComboBox.setValue(trade.getTradeType());
        statusComboBox.setValue(trade.getStatus());
        currencyComboBox.setValue(trade.getCurrency());
        tradeDatePicker.setValue(trade.getTradeDate());

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        if (trade.getEntryPoint() != null) {
            entryPointField.setText(trade.getEntryPoint().toString());
        }
        if (trade.getExitPoint() != null) {
            exitPointField.setText(trade.getExitPoint().toString());
        }
        // –ù–û–í–û–ï –ü–û–õ–ï
        if (trade.getTakeProfitTarget() != null) {
            takeProfitTargetField.setText(trade.getTakeProfitTarget().toString());
        }
        if (trade.getVolume() != null) {
            volumeField.setText(trade.getVolume().toString());
        }
        if (trade.getProfitLoss() != null) {
            profitLossField.setText(trade.getProfitLoss().toString());
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
        if (trade.getEntryTime() != null) {
            entryTimeField.setText(trade.getEntryTime().format(DateTimeMaskFormatter.getFormatter()));
        }
        if (trade.getExitTime() != null) {
            exitTimeField.setText(trade.getExitTime().format(DateTimeMaskFormatter.getFormatter()));
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
        entryReasonArea.setText(trade.getEntryReason() != null ? trade.getEntryReason() : "");
        exitReasonArea.setText(trade.getExitReason() != null ? trade.getExitReason() : "");
        notesArea.setText(trade.getComment() != null ? trade.getComment() : "");
    }

    @FXML
    private void saveTrade() {
        try {
            if (!validateForm()) {
                return;
            }

            Trade trade = isEditMode ? editingTrade : new Trade();
            fillTradeFromForm(trade);

            Trade savedTrade = isEditMode ? tradeService.update(trade) : tradeService.save(trade);

            eventPublisher.publishEvent(new TradeDataChangedEvent(this, "UPDATED"));

            showInfo(isEditMode ? "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" : "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");

            eventPublisher.publishEvent(new NavigationEvent(NavigationEvent.NavigationType.VIEW_TRADES));

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: " + e.getMessage());
        }
    }

    private void fillTradeFromForm(Trade trade) {
        trade.setAssetName(assetNameField.getText().trim());
        trade.setTradeType(tradeTypeComboBox.getValue());
        trade.setStatus(statusComboBox.getValue());
        trade.setCurrency(currencyComboBox.getValue());
        trade.setTradeDate(tradeDatePicker.getValue());

        trade.setEntryPoint(parseDecimal(entryPointField.getText()));
        trade.setExitPoint(parseDecimal(exitPointField.getText()));
        trade.setTakeProfitTarget(parseDecimal(takeProfitTargetField.getText())); // –ù–û–í–û–ï –ü–û–õ–ï
        trade.setVolume(parseDecimal(volumeField.getText()));
        trade.setProfitLoss(parseDecimal(profitLossField.getText()));

        trade.setEntryTime(parseDateTime(entryTimeField.getText()));
        trade.setExitTime(parseDateTime(exitTimeField.getText()));

        trade.setEntryReason(entryReasonArea.getText().trim().isEmpty() ? null : entryReasonArea.getText().trim());
        trade.setExitReason(exitReasonArea.getText().trim().isEmpty() ? null : exitReasonArea.getText().trim());
        trade.setComment(notesArea.getText().trim().isEmpty() ? null : notesArea.getText().trim());

        if (!isEditMode) {
            trade.setCreatedAt(LocalDateTime.now());
        }
        trade.setUpdatedAt(LocalDateTime.now());
    }

    private boolean validateForm() {
        StringBuilder errors = new StringBuilder();

        if (assetNameField.getText() == null || assetNameField.getText().trim().isEmpty()) {
            errors.append("‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (tradeTypeComboBox.getValue() == null) {
            errors.append("‚Ä¢ –¢–∏–ø —Å–¥–µ–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (statusComboBox.getValue() == null) {
            errors.append("‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (currencyComboBox.getValue() == null) {
            errors.append("‚Ä¢ –í–∞–ª—é—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (tradeDatePicker.getValue() == null) {
            errors.append("‚Ä¢ –î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (entryPointField.getText() == null || entryPointField.getText().trim().isEmpty()) {
            errors.append("‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        if (volumeField.getText() == null || volumeField.getText().trim().isEmpty()) {
            errors.append("‚Ä¢ –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n");
        }

        // –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –¥–ª—è Take Profit Target
        if (!takeProfitTargetField.getText().trim().isEmpty()) {
            try {
                BigDecimal entryPrice = parseDecimal(entryPointField.getText());
                BigDecimal targetPrice = parseDecimal(takeProfitTargetField.getText());
                TradeType tradeType = tradeTypeComboBox.getValue();

                if (entryPrice != null && targetPrice != null && tradeType != null) {
                    if (tradeType == TradeType.LONG && targetPrice.compareTo(entryPrice) <= 0) {
                        errors.append("‚Ä¢ –¶–µ–ª—å Take Profit –¥–ª—è –ª–æ–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞\n");
                    } else if (tradeType == TradeType.SHORT && targetPrice.compareTo(entryPrice) >= 0) {
                        errors.append("‚Ä¢ –¶–µ–ª—å Take Profit –¥–ª—è —à–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞\n");
                    }
                }
            } catch (Exception e) {
                errors.append("‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ Take Profit\n");
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if (!entryTimeField.getText().trim().isEmpty() && parseDateTime(entryTimeField.getText()) == null) {
            errors.append("‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n");
        }

        if (!exitTimeField.getText().trim().isEmpty() && parseDateTime(exitTimeField.getText()) == null) {
            errors.append("‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n");
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ CLOSED
        if (!exitTimeField.getText().trim().isEmpty() &&
                parseDateTime(exitTimeField.getText()) != null &&
                statusComboBox.getValue() != TradeStatus.CLOSED) {

            log.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ CLOSED");
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ
            statusComboBox.setValue(TradeStatus.CLOSED);
        }

        if (errors.length() > 0) {
            showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n\n" + errors.toString());
            return false;
        }

        return true;
    }

    private void calculateProfitLoss() {
        try {
            String entryPriceText = entryPointField.getText();
            String exitPriceText = exitPointField.getText();
            String volumeText = volumeField.getText();
            TradeType tradeType = tradeTypeComboBox.getValue();

            if (entryPriceText == null || entryPriceText.trim().isEmpty() ||
                    exitPriceText == null || exitPriceText.trim().isEmpty() ||
                    volumeText == null || volumeText.trim().isEmpty() ||
                    tradeType == null) {
                profitLossField.setText("");
                return;
            }

            BigDecimal entryPrice = parseDecimal(entryPriceText);
            BigDecimal exitPrice = parseDecimal(exitPriceText);
            BigDecimal volume = parseDecimal(volumeText);

            if (entryPrice == null || exitPrice == null || volume == null ||
                    entryPrice.compareTo(BigDecimal.ZERO) <= 0 ||
                    exitPrice.compareTo(BigDecimal.ZERO) <= 0 ||
                    volume.compareTo(BigDecimal.ZERO) <= 0) {
                profitLossField.setText("");
                return;
            }

            BigDecimal profitLoss;

            if (tradeType == TradeType.LONG) {
                profitLoss = exitPrice.subtract(entryPrice).multiply(volume);
            } else {
                profitLoss = entryPrice.subtract(exitPrice).multiply(volume);
            }

            String formattedProfitLoss = String.format("%.2f", profitLoss);
            profitLossField.setText(formattedProfitLoss);

            if (profitLoss.compareTo(BigDecimal.ZERO) >= 0) {
                profitLossField.setStyle("-fx-text-fill: #27ae60; -fx-font-weight: bold;");
            } else {
                profitLossField.setStyle("-fx-text-fill: #e74c3c; -fx-font-weight: bold;");
            }

            log.debug("–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {} –¥–ª—è —Å–¥–µ–ª–∫–∏ {} —Å –æ–±—ä–µ–º–æ–º {}",
                    formattedProfitLoss, tradeType, volume);

        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞: {}", e.getMessage());
            profitLossField.setText("");
            profitLossField.setStyle("");
        }
    }

    @FXML
    private void clearForm() {
        log.debug("–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã");

        try {
            assetNameField.clear();
            entryPointField.clear();
            exitPointField.clear();
            takeProfitTargetField.clear(); // –ù–û–í–û–ï –ü–û–õ–ï
            volumeField.clear();
            profitLossField.clear();
            entryTimeField.clear();
            exitTimeField.clear();

            entryReasonArea.clear();
            exitReasonArea.clear();
            notesArea.clear();

            tradeTypeComboBox.setValue(null);
            statusComboBox.setValue(null);
            currencyComboBox.setValue(null);

            tradeDatePicker.setValue(null);

            profitLossField.setStyle("");
            takeProfitTargetField.setStyle(""); // –°–±—Ä–æ—Å —Å—Ç–∏–ª—è
            takeProfitTargetField.setTooltip(null); // –°–±—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏

            log.debug("–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ä–º—ã: {}", e.getMessage(), e);
        }
    }

    @FXML
    private void cancel() {
        log.info("–û—Ç–º–µ–Ω–∞ " + (isEditMode ? "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" : "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è") + " —Å–¥–µ–ª–∫–∏");
        eventPublisher.publishEvent(new NavigationEvent(NavigationEvent.NavigationType.VIEW_TRADES));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private BigDecimal parseDecimal(String text) {
        if (text == null || text.trim().isEmpty()) {
            return null;
        }
        try {
            return new BigDecimal(text.trim());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private LocalDateTime parseDateTime(String text) {
        if (text == null || text.trim().isEmpty()) {
            return null;
        }
        try {
            return LocalDateTime.parse(text.trim(), DateTimeMaskFormatter.getFormatter());
        } catch (DateTimeParseException e) {
            return null;
        }
    }

    private void showInfo(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–û—à–∏–±–∫–∞");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}