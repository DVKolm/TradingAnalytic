
package com.example.ta.controller.news;

import com.example.ta.domain.news.TelegramChannel;
import com.example.ta.domain.news.TelegramSettings;
import com.example.ta.service.TelegramNewsService;
import com.example.ta.service.TelegramSettingsService;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.net.URL;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.ResourceBundle;

@Slf4j
@Component
@RequiredArgsConstructor
public class TelegramSettingsController implements Initializable {

    private final TelegramSettingsService telegramSettingsService;
    private final TelegramNewsService telegramNewsService;

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    @FXML private TextField botTokenField;
    @FXML private TextField chatIdField;
    @FXML private CheckBox enabledCheckBox;
    @FXML private CheckBox sendOnOpenCheckBox;
    @FXML private CheckBox sendOnCloseCheckBox;
    @FXML private CheckBox sendOnUpdateCheckBox;
    @FXML private CheckBox includeImageCheckBox;
    @FXML private TextArea messageTemplateArea;
    @FXML private Button saveButton;
    @FXML private Button testButton;
    @FXML private Label statusLabel;

    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
    @FXML private TableView<TelegramChannel> channelsTable;
    @FXML private TableColumn<TelegramChannel, String> usernameColumn;
    @FXML private TableColumn<TelegramChannel, String> titleColumn;
    @FXML private TableColumn<TelegramChannel, Boolean> activeColumn;
    @FXML private TableColumn<TelegramChannel, String> createdColumn;

    @FXML private TextField newChannelUsernameField;
    @FXML private TextField newChannelTitleField;
    @FXML private TextArea newChannelDescriptionArea;
    @FXML private Button addChannelButton;
    @FXML private Button removeChannelButton;
    @FXML private Button toggleChannelButton;

    private ObservableList<TelegramChannel> channelsData = FXCollections.observableArrayList();

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramSettingsController");

        setupForm();
        setupChannelsTable();
        loadCurrentSettings();
        loadChannels();
        setupEventHandlers();

        log.info("TelegramSettingsController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    private void setupForm() {
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        botTokenField.setPromptText("–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789:AAHdqTcvCH1vGWJxfSeofSAs0K5PA");
        chatIdField.setPromptText("–ù–∞–ø—Ä–∏–º–µ—Ä: -1001237890 –∏–ª–∏ 98321");

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        newChannelUsernameField.setPromptText("–ù–∞–ø—Ä–∏–º–µ—Ä: crypto_news");
        newChannelTitleField.setPromptText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏");
        newChannelDescriptionArea.setPromptText("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)");

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        messageTemplateArea.setPromptText("""
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:
                {asset} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
                {type} - —Ç–∏–ø —Å–¥–µ–ª–∫–∏ (LONG/SHORT)
                {entryPrice} - —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                {exitPrice} - —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
                {volume} - –æ–±—ä–µ–º
                {profitLoss} - –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                {status} - —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
                {action} - –¥–µ–π—Å—Ç–≤–∏–µ (OPEN/CLOSE/UPDATE)
                
                –ü—Ä–∏–º–µ—Ä:
                üöÄ {action} {type} –ø–æ {asset}
                üí∞ –¶–µ–Ω–∞: {entryPrice}
                üìä –û–±—ä–µ–º: {volume}
                """);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        sendOnOpenCheckBox.setSelected(true);
        sendOnCloseCheckBox.setSelected(true);
        sendOnUpdateCheckBox.setSelected(false);
        includeImageCheckBox.setSelected(true);
    }

    private void setupChannelsTable() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        usernameColumn.setCellValueFactory(new PropertyValueFactory<>("username"));
        titleColumn.setCellValueFactory(new PropertyValueFactory<>("title"));
        activeColumn.setCellValueFactory(new PropertyValueFactory<>("isActive"));
        createdColumn.setCellValueFactory(cellData -> {
            if (cellData.getValue().getCreatedAt() != null) {
                String formatted = cellData.getValue().getCreatedAt()
                        .format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
                return new javafx.beans.property.SimpleStringProperty(formatted);
            }
            return new javafx.beans.property.SimpleStringProperty("");
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activeColumn.setCellFactory(column -> new TableCell<TelegramChannel, Boolean>() {
            @Override
            protected void updateItem(Boolean active, boolean empty) {
                super.updateItem(active, empty);
                if (empty || active == null) {
                    setText("");
                } else {
                    setText(active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω");
                    setStyle(active ? "-fx-text-fill: #27ae60;" : "-fx-text-fill: #e74c3c;");
                }
            }
        });

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
        channelsTable.setItems(channelsData);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        channelsTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            boolean hasSelection = newSelection != null;
            removeChannelButton.setDisable(!hasSelection);
            toggleChannelButton.setDisable(!hasSelection);

            if (hasSelection) {
                toggleChannelButton.setText(newSelection.getIsActive() ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å");
            }
        });
    }

    private void setupEventHandlers() {
        botTokenField.textProperty().addListener((obs, old, newValue) -> {
            if (newValue == null || newValue.trim().isEmpty()) {
                enabledCheckBox.setSelected(false);
            }
        });

        chatIdField.textProperty().addListener((obs, old, newValue) -> {
            if (newValue == null || newValue.trim().isEmpty()) {
                enabledCheckBox.setSelected(false);
            }
        });

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        enabledCheckBox.selectedProperty().addListener((obs, old, newValue) -> {
            if (newValue && !validateRequiredFields()) {
                Platform.runLater(() -> {
                    enabledCheckBox.setSelected(false);
                    showWarning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                });
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è username –∫–∞–Ω–∞–ª–∞
        newChannelUsernameField.textProperty().addListener((obs, old, newValue) -> {
            boolean valid = newValue != null && !newValue.trim().isEmpty();
            addChannelButton.setDisable(!valid);
        });
    }

    @FXML
    private void handleAddChannel() {
        String username = newChannelUsernameField.getText().trim();
        String title = newChannelTitleField.getText().trim();
        String description = newChannelDescriptionArea.getText().trim();

        if (username.isEmpty()) {
            showError("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞");
            return;
        }

        // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –¥–æ–±–∞–≤–∏–ª
        if (username.startsWith("@")) {
            username = username.substring(1);
        }

        try {
            telegramNewsService.addChannel(username, title.isEmpty() ? username : title, description);

            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            newChannelUsernameField.clear();
            newChannelTitleField.clear();
            newChannelDescriptionArea.clear();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            loadChannels();

            setStatus("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: @" + username, "#27ae60");
            showInfo("–ö–∞–Ω–∞–ª @" + username + " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π!");

        } catch (IllegalArgumentException e) {
            showError("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: " + e.getMessage());
        }
    }

    @FXML
    private void handleRemoveChannel() {
        TelegramChannel selected = channelsTable.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showWarning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            return;
        }

        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
        confirmAlert.setTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");
        confirmAlert.setHeaderText("–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞");
        confirmAlert.setContentText("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª @" + selected.getUsername() + "?");

        Optional<ButtonType> result = confirmAlert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
                telegramNewsService.removeChannel(selected.getUsername());
                loadChannels();
                setStatus("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω", "#27ae60");
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", e);
                showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: " + e.getMessage());
            }
        }
    }

    @FXML
    private void handleToggleChannel() {
        TelegramChannel selected = channelsTable.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showWarning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª");
            return;
        }

        try {
            if (selected.getIsActive()) {
                telegramNewsService.removeChannel(selected.getUsername());
                setStatus("‚è∏Ô∏è –ö–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω", "#f39c12");
            } else {
                // –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
                telegramNewsService.addChannel(selected.getUsername(), selected.getTitle(), selected.getDescription());
                setStatus("‚ñ∂Ô∏è –ö–∞–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω", "#27ae60");
            }
            loadChannels();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: " + e.getMessage());
        }
    }

    private void loadChannels() {
        try {
            var channels = telegramNewsService.getActiveChannels();
            channelsData.clear();
            channelsData.addAll(channels);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤", e);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: " + e.getMessage());
        }
    }

    @FXML
    private void handleSave() {
        try {
            if (enabledCheckBox.isSelected() && !validateRequiredFields()) {
                showError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            TelegramSettings settings = TelegramSettings.builder()
                    .botToken(botTokenField.getText().trim())
                    .chatId(chatIdField.getText().trim())
                    .enabled(enabledCheckBox.isSelected())
                    .sendOnTradeOpen(sendOnOpenCheckBox.isSelected())
                    .sendOnTradeClose(sendOnCloseCheckBox.isSelected())
                    .sendOnTradeUpdate(sendOnUpdateCheckBox.isSelected())
                    .includeChartImage(includeImageCheckBox.isSelected())
                    .messageTemplate(messageTemplateArea.getText().trim())
                    .build();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            telegramSettingsService.saveSettings(settings);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            setStatus("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "#27ae60");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (settings.getEnabled()) {
                showInfo("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —Å–¥–µ–ª–∫–∞—Ö.");
            } else {
                showInfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
            }

            log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–≤–∫–ª—é—á–µ–Ω–æ: {})", settings.getEnabled());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram", e);
            setStatus("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + e.getMessage(), "#e74c3c");
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.getMessage());
        }
    }

    @FXML
    private void handleTest() {
        if (!validateRequiredFields()) {
            showError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        testButton.setDisable(true);
        setStatus("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...", "#f39c12");

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        Task<Boolean> testTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                TelegramSettings testSettings = TelegramSettings.builder()
                        .botToken(botTokenField.getText().trim())
                        .chatId(chatIdField.getText().trim())
                        .enabled(true)
                        .build();

                return telegramSettingsService.testConnection(testSettings);
            }
        };

        testTask.setOnSucceeded(e -> {
            Platform.runLater(() -> {
                testButton.setDisable(false);
                boolean success = testTask.getValue();

                if (success) {
                    setStatus("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", "#27ae60");
                    showInfo("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à Telegram.");
                } else {
                    setStatus("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!", "#e74c3c");
                    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                            "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞\n" +
                            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —á–∞—Ç–∞\n" +
                            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É/—á–∞—Ç");
                }
            });
        });

        testTask.setOnFailed(e -> {
            Platform.runLater(() -> {
                testButton.setDisable(false);
                Throwable exception = testTask.getException();
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram", exception);
                setStatus("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "#e74c3c");
                showError("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + exception.getMessage());
            });
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread testThread = new Thread(testTask);
        testThread.setDaemon(true);
        testThread.start();
    }

    @FXML
    private void loadCurrentSettings() {
        telegramSettingsService.getCurrentSettings().ifPresentOrElse(
                this::populateForm,
                () -> {
                    log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    populateForm(telegramSettingsService.getDefaultSettings());
                }
        );
    }

    private void populateForm(TelegramSettings settings) {
        botTokenField.setText(settings.getBotToken() != null ? settings.getBotToken() : "");
        chatIdField.setText(settings.getChatId() != null ? settings.getChatId() : "");
        enabledCheckBox.setSelected(settings.getEnabled() != null ? settings.getEnabled() : false);
        sendOnOpenCheckBox.setSelected(settings.getSendOnTradeOpen() != null ? settings.getSendOnTradeOpen() : true);
        sendOnCloseCheckBox.setSelected(settings.getSendOnTradeClose() != null ? settings.getSendOnTradeClose() : true);
        sendOnUpdateCheckBox.setSelected(settings.getSendOnTradeUpdate() != null ? settings.getSendOnTradeUpdate() : false);
        includeImageCheckBox.setSelected(settings.getIncludeChartImage() != null ? settings.getIncludeChartImage() : true);
        messageTemplateArea.setText(settings.getMessageTemplate() != null ? settings.getMessageTemplate() : "");

        log.debug("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: –≤–∫–ª—é—á–µ–Ω–æ={}", settings.getEnabled());
    }

    private boolean validateRequiredFields() {
        String token = botTokenField.getText();
        String chatId = chatIdField.getText();

        return token != null && !token.trim().isEmpty()
                && chatId != null && !chatId.trim().isEmpty();
    }

    private void setStatus(String message, String color) {
        statusLabel.setText(message);
        statusLabel.setStyle("-fx-text-fill: " + color + "; -fx-font-weight: 500;");
    }

    private void showInfo(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        alert.setHeaderText("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        alert.setContentText(message);

        // –£–ª—É—á—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –¥–∏–∞–ª–æ–≥–∞
        alert.getDialogPane().setStyle("-fx-font-family: 'Segoe UI'; -fx-font-size: 13px;");

        alert.showAndWait();
    }

    private void showWarning(String message) {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ");
        alert.setHeaderText("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        alert.setContentText(message);

        alert.getDialogPane().setStyle("-fx-font-family: 'Segoe UI'; -fx-font-size: 13px;");

        alert.showAndWait();
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–û—à–∏–±–∫–∞");
        alert.setHeaderText("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram");
        alert.setContentText(message);

        alert.getDialogPane().setStyle("-fx-font-family: 'Segoe UI'; -fx-font-size: 13px;");

        alert.showAndWait();
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
     */
    public void refreshStatus() {
        loadCurrentSettings();
        loadChannels();

        String status = telegramSettingsService.getTelegramStatus();
        String color = switch (status) {
            case "–ê–∫—Ç–∏–≤–Ω–æ" -> "#27ae60";
            case "–û—Ç–∫–ª—é—á–µ–Ω–æ" -> "#f39c12";
            default -> "#e74c3c";
        };

        setStatus("üì± –°—Ç–∞—Ç—É—Å: " + status, color);
    }
}