package com.example.ta.controller.news;

import com.example.ta.domain.news.TwitterSettings;
import com.example.ta.domain.news.TwitterUser;
import com.example.ta.service.TwitterNewsService;
import com.example.ta.service.TwitterSettingsService;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class TwitterSettingsController {

    private final TwitterSettingsService twitterSettingsService;
    private final TwitterNewsService twitterNewsService;

    @FXML private TextField bearerTokenField;
    @FXML private TextField apiKeyField;
    @FXML private TextField apiSecretField;
    @FXML private TextField accessTokenField;
    @FXML private TextField accessTokenSecretField;
    @FXML private CheckBox enabledCheckBox;
    @FXML private Spinner<Integer> pollIntervalSpinner;
    @FXML private Button testConnectionButton;
    @FXML private Button saveButton;
    @FXML private Label statusLabel;
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    @FXML private TextField usernameField;
    @FXML private Button addUserButton;
    @FXML private TableView<TwitterUser> usersTable;
    @FXML private TableColumn<TwitterUser, String> usernameColumn;
    @FXML private TableColumn<TwitterUser, String> displayNameColumn;
    @FXML private TableColumn<TwitterUser, Integer> followersColumn;
    @FXML private TableColumn<TwitterUser, Boolean> activeColumn;
    @FXML private TableColumn<TwitterUser, Void> actionsColumn;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @FXML private Label activeUsersLabel;
    @FXML private Label totalTweetsLabel;
    @FXML private Label todayTweetsLabel;
    
    private ObservableList<TwitterUser> usersList = FXCollections.observableArrayList();

    @FXML
    private void initialize() {
        setupComponents();
        setupTable();
        loadSettings();
        loadUsers();
        loadStatistics();
        updateStatus();
    }

    private void setupComponents() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        pollIntervalSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 60, 5));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        testConnectionButton.setOnAction(e -> testConnection());
        saveButton.setOnAction(e -> saveSettings());
        addUserButton.setOnAction(e -> addUser());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        bearerTokenField.textProperty().addListener((obs, oldVal, newVal) -> validateForm());
        enabledCheckBox.selectedProperty().addListener((obs, oldVal, newVal) -> validateForm());
    }

    private void setupTable() {
        usernameColumn.setCellValueFactory(new PropertyValueFactory<>("username"));
        displayNameColumn.setCellValueFactory(new PropertyValueFactory<>("displayName"));
        followersColumn.setCellValueFactory(new PropertyValueFactory<>("followersCount"));
        
        // –ö–æ–ª–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —á–µ–∫–±–æ–∫—Å–æ–º
        activeColumn.setCellFactory(column -> new TableCell<TwitterUser, Boolean>() {
            private final CheckBox checkBox = new CheckBox();
            
            @Override
            protected void updateItem(Boolean item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || getTableRow().getItem() == null) {
                    setGraphic(null);
                } else {
                    TwitterUser user = getTableRow().getItem();
                    checkBox.setSelected(user.getIsActive());
                    checkBox.setOnAction(e -> {
                        twitterNewsService.toggleUserStatus(user.getId());
                        loadUsers();
                    });
                    setGraphic(checkBox);
                }
            }
        });
        
        // –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        actionsColumn.setCellFactory(column -> new TableCell<TwitterUser, Void>() {
            private final Button refreshButton = new Button("üîÑ");
            private final Button deleteButton = new Button("üóëÔ∏è");
            
            {
                refreshButton.setOnAction(e -> {
                    TwitterUser user = getTableRow().getItem();
                    if (user != null) {
                        try {
                            twitterNewsService.refreshUserInfo(user.getId());
                            loadUsers();
                            showSuccess("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
                        } catch (Exception ex) {
                            showError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + ex.getMessage());
                        }
                    }
                });
                
                deleteButton.setOnAction(e -> {
                    TwitterUser user = getTableRow().getItem();
                    if (user != null && confirmDelete(user.getUsername())) {
                        try {
                            twitterNewsService.removeUser(user.getId());
                            loadUsers();
                            showSuccess("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
                        } catch (Exception ex) {
                            showError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + ex.getMessage());
                        }
                    }
                });
            }
            
            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    var hbox = new javafx.scene.layout.HBox(5);
                    hbox.getChildren().addAll(refreshButton, deleteButton);
                    setGraphic(hbox);
                }
            }
        });
        
        usersTable.setItems(usersList);
    }

    private void loadSettings() {
        Optional<TwitterSettings> settingsOpt = twitterSettingsService.getCurrentSettings();
        if (settingsOpt.isPresent()) {
            TwitterSettings settings = settingsOpt.get();
            
            Platform.runLater(() -> {
                bearerTokenField.setText(settings.getBearerToken() != null ? settings.getBearerToken() : "");
                apiKeyField.setText(settings.getApiKey() != null ? settings.getApiKey() : "");
                apiSecretField.setText(settings.getApiSecret() != null ? settings.getApiSecret() : "");
                accessTokenField.setText(settings.getAccessToken() != null ? settings.getAccessToken() : "");
                accessTokenSecretField.setText(settings.getAccessTokenSecret() != null ? settings.getAccessTokenSecret() : "");
                enabledCheckBox.setSelected(settings.getIsEnabled());
                pollIntervalSpinner.getValueFactory().setValue(settings.getPollIntervalMinutes());
            });
        }
    }

    private void loadUsers() {
        try {
            var users = twitterNewsService.getActiveUsers();
            Platform.runLater(() -> {
                usersList.clear();
                usersList.addAll(users);
            });
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e);
        }
    }

    private void loadStatistics() {
        try {
            Map<String, Object> stats = twitterNewsService.getTwitterStatistics();
            Platform.runLater(() -> {
                activeUsersLabel.setText(String.valueOf(stats.get("activeUsers")));
                totalTweetsLabel.setText(String.valueOf(stats.get("totalTweets")));
                todayTweetsLabel.setText(String.valueOf(stats.get("todayTweets")));
            });
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", e);
        }
    }

    @FXML
    public void testConnection() {
        TwitterSettings settings = createSettingsFromForm();
        
        testConnectionButton.setDisable(true);
        testConnectionButton.setText("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...");
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        new Thread(() -> {
            try {
                boolean success = twitterSettingsService.testConnection(settings);
                
                Platform.runLater(() -> {
                    if (success) {
                        showSuccess("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Twitter API —É—Å–ø–µ—à–Ω–æ!");
                    } else {
                        showError("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Twitter API");
                    }
                    
                    testConnectionButton.setDisable(false);
                    testConnectionButton.setText("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
                });
            } catch (Exception e) {
                Platform.runLater(() -> {
                    showError("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                    testConnectionButton.setDisable(false);
                    testConnectionButton.setText("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
                });
            }
        }).start();
    }

    @FXML
    public void saveSettings() {
        try {
            TwitterSettings settings = createSettingsFromForm();
            twitterSettingsService.saveSettings(settings);
            
            showSuccess("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Twitter —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
            updateStatus();
            
        } catch (Exception e) {
            showError("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    @FXML
    public void addUser() {
        String username = usernameField.getText().trim();
        if (username.isEmpty()) {
            showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (username.startsWith("@")) {
            username = username.substring(1);
        }
        
        addUserButton.setDisable(true);
        addUserButton.setText("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...");
        
        String finalUsername = username;
        new Thread(() -> {
            try {
                twitterNewsService.addTwitterUser(finalUsername);
                
                Platform.runLater(() -> {
                    usernameField.clear();
                    loadUsers();
                    loadStatistics();
                    showSuccess("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + finalUsername + " –¥–æ–±–∞–≤–ª–µ–Ω!");
                    
                    addUserButton.setDisable(false);
                    addUserButton.setText("–î–æ–±–∞–≤–∏—Ç—å");
                });
            } catch (Exception e) {
                Platform.runLater(() -> {
                    showError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " + e.getMessage());
                    addUserButton.setDisable(false);
                    addUserButton.setText("–î–æ–±–∞–≤–∏—Ç—å");
                });
            }
        }).start();
    }

    private TwitterSettings createSettingsFromForm() {
        TwitterSettings settings = new TwitterSettings();
        settings.setBearerToken(bearerTokenField.getText().trim());
        settings.setApiKey(apiKeyField.getText().trim());
        settings.setApiSecret(apiSecretField.getText().trim());
        settings.setAccessToken(accessTokenField.getText().trim());
        settings.setAccessTokenSecret(accessTokenSecretField.getText().trim());
        settings.setIsEnabled(enabledCheckBox.isSelected());
        settings.setPollIntervalMinutes(pollIntervalSpinner.getValue());
        return settings;
    }

    private void validateForm() {
        boolean hasRequiredFields = !bearerTokenField.getText().trim().isEmpty();
        boolean enabled = enabledCheckBox.isSelected();
        
        testConnectionButton.setDisable(!hasRequiredFields);
        saveButton.setDisable(false); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
        
        if (enabled && !hasRequiredFields) {
            statusLabel.setText("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ Bearer Token");
            statusLabel.setStyle("-fx-text-fill: orange;");
        }
    }

    private void updateStatus() {
        String status = twitterSettingsService.getTwitterStatus();
        Platform.runLater(() -> {
            statusLabel.setText("–°—Ç–∞—Ç—É—Å: " + status);
            statusLabel.setStyle(getStatusStyle(status));
        });
    }

    private String getStatusStyle(String status) {
        return switch (status) {
            case "–ê–∫—Ç–∏–≤–Ω–æ" -> "-fx-text-fill: green;";
            case "–û—Ç–∫–ª—é—á–µ–Ω–æ" -> "-fx-text-fill: gray;";
            case "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ", "–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" -> "-fx-text-fill: orange;";
            default -> "-fx-text-fill: black;";
        };
    }

    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("–£—Å–ø–µ—Ö");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–û—à–∏–±–∫–∞");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private boolean confirmDelete(String username) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");
        alert.setHeaderText("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?");
        alert.setContentText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + username + "?");
        
        Optional<ButtonType> result = alert.showAndWait();
        return result.isPresent() && result.get() == ButtonType.OK;
    }
}