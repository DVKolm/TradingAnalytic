package com.example.ta.repository;

import com.example.ta.domain.NewsMessage;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface NewsMessageRepository extends JpaRepository<NewsMessage, Long> {

    /**
     * –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –∏ username –∫–∞–Ω–∞–ª–∞
     */
    Optional<NewsMessage> findByTelegramMessageIdAndChannelUsername(
            Integer telegramMessageId,
            String channelUsername
    );

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã
     */
    @Query("SELECT n FROM NewsMessage n WHERE n.isVisible = true ORDER BY n.messageDate DESC")
    List<NewsMessage> findAllVisibleOrderByDateDesc();

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –≤–∏–¥–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–∏–º–∏—Ç–æ–º
     */
    @Query("SELECT n FROM NewsMessage n WHERE n.isVisible = true ORDER BY n.messageDate DESC LIMIT :limit")
    List<NewsMessage> findTopVisibleNews(@Param("limit") int limit);

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–∏–º–∏—Ç–æ–º (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π)
     */
    @Query("SELECT n FROM NewsMessage n ORDER BY n.messageDate DESC, n.id DESC LIMIT :limit")
    List<NewsMessage> findLatestNews(@Param("limit") int limit);

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     */
    @Query("SELECT n FROM NewsMessage n WHERE n.channelUsername = :channelUsername " +
            "ORDER BY n.messageDate DESC, n.id DESC LIMIT :limit")
    List<NewsMessage> findLatestNewsByChannel(
            @Param("channelUsername") String channelUsername,
            @Param("limit") int limit
    );

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
     */
    @Query("SELECT n FROM NewsMessage n WHERE n.messageDate >= :since " +
            "ORDER BY n.messageDate DESC, n.id DESC")
    List<NewsMessage> findNewsSince(@Param("since") LocalDateTime since);

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
     */
    @Query("SELECT n FROM NewsMessage n WHERE " +
            "LOWER(n.messageText) LIKE LOWER(CONCAT('%', :keyword, '%')) OR " +
            "LOWER(n.channelTitle) LIKE LOWER(CONCAT('%', :keyword, '%')) " +
            "ORDER BY n.messageDate DESC LIMIT :limit")
    List<NewsMessage> findNewsByKeyword(
            @Param("keyword") String keyword,
            @Param("limit") int limit
    );

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
     */
    @Query("SELECT n.channelUsername, n.channelTitle, COUNT(n) as messageCount " +
            "FROM NewsMessage n " +
            "GROUP BY n.channelUsername, n.channelTitle " +
            "ORDER BY COUNT(n) DESC")
    List<Object[]> getChannelStatistics();

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Ç–æ–ª—å–∫–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
     */
    @Query("SELECT n FROM NewsMessage n " +
            "WHERE n.channelUsername IN (" +
            "  SELECT tc.username FROM TelegramChannel tc WHERE tc.isActive = true" +
            ") " +
            "ORDER BY n.messageDate DESC LIMIT :limit")
    List<NewsMessage> findLatestNewsFromActiveChannels(@Param("limit") int limit);

    /**
     * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    @Query("SELECT COUNT(n) FROM NewsMessage n WHERE " +
            "n.messageDate >= :startOfDay AND n.messageDate < :endOfDay")
    long countTodayMessages(@Param("startOfDay") LocalDateTime startOfDay,
                            @Param("endOfDay") LocalDateTime endOfDay);

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    @Query("SELECT n FROM NewsMessage n WHERE n.messageDate BETWEEN :startDate AND :endDate " +
            "ORDER BY n.messageDate DESC")
    List<NewsMessage> findNewsBetweenDates(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
    long deleteByCreatedAtBefore(LocalDateTime cutoffDate);

    long countByCreatedAtBefore(LocalDateTime cutoffDate);

    long countByIsVisible(boolean isVisible);

    long countByCreatedAtAfter(LocalDateTime date);
}