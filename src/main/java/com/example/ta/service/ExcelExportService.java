
package com.example.ta.service;

import com.example.ta.domain.Trade;
import com.example.ta.domain.TradeStatistics;
import com.example.ta.util.NumberFormatUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ExcelExportService {

    private final TradeService tradeService;
    private static final int MAX_RETRY_ATTEMPTS = 5;
    private static final long RETRY_DELAY_MS = 1000;

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ Excel
     */
    public File exportTradingStatistics(TradeStatistics statistics, LocalDate startDate, LocalDate endDate) throws IOException {
        log.info("–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {} - {}", startDate, endDate);

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet statisticsSheet = workbook.createSheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
            createStatisticsSheet(statisticsSheet, statistics, workbook);

            Sheet tradesSheet = workbook.createSheet("–°–¥–µ–ª–∫–∏");
            List<Trade> trades = tradeService.getClosedTradesForPeriod(startDate, endDate);
            createTradesSheet(tradesSheet, trades, workbook);

            File file = createExcelFileWithRetry(workbook, statistics);

            log.info("Excel –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {}", file.getAbsolutePath());
            return file;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
     */
    private File createExcelFileWithRetry(Workbook workbook, TradeStatistics statistics) throws IOException {
        IOException lastException = null;

        for (int attempt = 1; attempt <= MAX_RETRY_ATTEMPTS; attempt++) {
            try {
                return createExcelFileSecure(workbook, statistics, attempt);
            } catch (IOException e) {
                lastException = e;
                log.warn("–ü–æ–ø—ã—Ç–∫–∞ {} –∏–∑ {} –Ω–µ—É–¥–∞—á–Ω–∞: {}", attempt, MAX_RETRY_ATTEMPTS, e.getMessage());

                if (attempt < MAX_RETRY_ATTEMPTS) {
                    try {
                        log.info("–û–∂–∏–¥–∞–Ω–∏–µ {} –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...", RETRY_DELAY_MS);
                        Thread.sleep(RETRY_DELAY_MS);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        throw new IOException("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω", ie);
                    }
                }
            }
        }

        throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª –ø–æ—Å–ª–µ " + MAX_RETRY_ATTEMPTS + " –ø–æ–ø—ã—Ç–æ–∫", lastException);
    }


    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    private File createExcelFileSecure(Workbook workbook, TradeStatistics statistics, int attempt) throws IOException {
        String fileName = generateFileName(statistics);
        Path filePath = Path.of(System.getProperty("user.home"), fileName);

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        if (Files.exists(filePath) && attempt > 1) {
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH_mm_ss"));
            String baseFileName = fileName.substring(0, fileName.lastIndexOf('.'));
            String extension = fileName.substring(fileName.lastIndexOf('.'));
            fileName = baseFileName + "_" + timestamp + extension;
            filePath = Path.of(System.getProperty("user.home"), fileName);
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        if (Files.exists(filePath)) {
            try {
                log.info("–§–∞–π–ª {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...", filePath);
                Files.delete(filePath);
            } catch (IOException e) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {}: {}", filePath, e.getMessage());
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH_mm_ss"));
                String baseFileName = fileName.substring(0, fileName.lastIndexOf('.'));
                String extension = fileName.substring(fileName.lastIndexOf('.'));
                fileName = baseFileName + "_" + timestamp + extension;
                filePath = Path.of(System.getProperty("user.home"), fileName);
                log.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {}", filePath);
            }
        }

        File file = filePath.toFile();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º try-with-resources –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        try (FileOutputStream fos = new FileOutputStream(file);
             FileChannel channel = fos.getChannel()) {

            // –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
            try (FileLock lock = channel.tryLock()) {
                if (lock == null) {
                    throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: " + filePath);
                }

                log.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏: {}", filePath);

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º workbook –≤ –ø–æ—Ç–æ–∫
                workbook.write(fos);
                fos.flush(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä

                log.info("Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {}", filePath);
                return file;
            }
        } catch (IOException e) {
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            try {
                if (Files.exists(filePath)) {
                    Files.delete(filePath);
                }
            } catch (IOException deleteEx) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {}", filePath, deleteEx);
            }
            throw e;
        }
    }

    private String generateFileName(TradeStatistics statistics) {
        LocalDate now = LocalDate.now();
        String dateStr = now.format(DateTimeFormatter.ofPattern("yyyy_MM_dd"));

        if (statistics.getPeriodStart() != null && statistics.getPeriodEnd() != null) {
            String startStr = statistics.getPeriodStart().format(DateTimeFormatter.ofPattern("yyyy_MM_dd"));
            String endStr = statistics.getPeriodEnd().format(DateTimeFormatter.ofPattern("yyyy_MM_dd"));
            return String.format("trading_statistics_%s_%s_%s.xlsx", startStr, endStr, dateStr);
        } else {
            return String.format("trading_statistics_all_time_%s.xlsx", dateStr);
        }
    }


    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    private void createStatisticsSheet(Sheet sheet, TradeStatistics stats, Workbook workbook) {
        CellStyle headerStyle = createHeaderStyle(workbook);
        CellStyle titleStyle = createTitleStyle(workbook);
        CellStyle dataStyle = createDataStyle(workbook);
        CellStyle currencyStyle = createCurrencyStyle(workbook);
        CellStyle centeredDataStyle = createCenteredDataStyle(workbook);

        int rowNum = 0;

        Row titleRow = sheet.createRow(rowNum++);
        Cell titleCell = titleRow.createCell(0);
        titleCell.setCellValue("üìä –û–¢–ß–ï–¢ –ü–û –¢–û–†–ì–û–í–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ï");
        titleCell.setCellStyle(titleStyle);
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 3));

        rowNum++;
        Row periodRow = sheet.createRow(rowNum++);
        periodRow.createCell(0).setCellValue("–ü–µ—Ä–∏–æ–¥:");
        String periodText = stats.getPeriodType() != null ? stats.getPeriodType().getDisplayName() : "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥";
        if (stats.getPeriodStart() != null && stats.getPeriodEnd() != null) {
            periodText += String.format(" (%s - %s)",
                    stats.getPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    stats.getPeriodEnd().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        }
        periodRow.createCell(1).setCellValue(periodText);

        Row dateRow = sheet.createRow(rowNum++);
        dateRow.createCell(0).setCellValue("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:");
        dateRow.createCell(1).setCellValue(LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));

        rowNum++;

        Row headerRow = sheet.createRow(rowNum++);
        Cell headerCell = headerRow.createCell(0);
        headerCell.setCellValue("–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò");
        headerCell.setCellStyle(headerStyle);
        sheet.addMergedRegion(new CellRangeAddress(rowNum - 1, rowNum - 1, 0, 1));

        addStatRow(sheet, rowNum++, "üíº –í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫",
                NumberFormatUtil.formatIntegerWithSpaces(stats.getTotalTrades()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å",
                NumberFormatUtil.formatCurrencyWithSpaces(stats.getTotalProfit()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üìä –û–±—â–∏–π –æ–±—ä–µ–º",
                NumberFormatUtil.formatCurrencyWithSpaces(stats.getTotalVolume()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
                NumberFormatUtil.formatIntegerWithSpaces(stats.getWinningTrades()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
                NumberFormatUtil.formatIntegerWithSpaces(stats.getLosingTrades()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞",
                NumberFormatUtil.formatPercentage(stats.getWinRate()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å",
                NumberFormatUtil.formatCurrencyWithSpaces(stats.getAvgProfit()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å",
                NumberFormatUtil.formatCurrencyWithSpaces(stats.getMaxProfit()), centeredDataStyle);
        addStatRow(sheet, rowNum++, "üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫",
                NumberFormatUtil.formatCurrencyWithSpaces(stats.getMaxLoss()), centeredDataStyle);

        setStatisticsColumnWidths(sheet);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
     */
    private void createTradesSheet(Sheet sheet, List<Trade> trades, Workbook workbook) {
        CellStyle headerStyle = createHeaderStyle(workbook);
        CellStyle dataStyle = createDataStyle(workbook);
        CellStyle currencyFormattedStyle = createCurrencyFormattedStyle(workbook);
        CellStyle dateStyle = createDateStyle(workbook);
        CellStyle textWrapStyle = createTextWrapStyle(workbook);

        int rowNum = 0;

        Row headerRow = sheet.createRow(rowNum++);
        String[] headers = {"‚Ññ", "–ê–∫—Ç–∏–≤", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏",
                "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞", "–û–±—ä–µ–º", "–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫",
                "–ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞", "–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"};

        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(headerStyle);
        }

        for (int i = 0; i < trades.size(); i++) {
            Trade trade = trades.get(i);
            Row row = sheet.createRow(rowNum++);

            row.createCell(0).setCellValue(i + 1); // –ù–æ–º–µ—Ä
            row.createCell(1).setCellValue(trade.getAssetName() != null ? trade.getAssetName() : "");
            row.createCell(2).setCellValue(trade.getTradeType() != null ? trade.getTradeType().name() : "");
            row.createCell(3).setCellValue(trade.getStatus() != null ? trade.getStatus().name() : "");

            Cell dateCell = row.createCell(4);
            if (trade.getTradeDate() != null) {
                dateCell.setCellValue(trade.getTradeDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));
            }
            dateCell.setCellStyle(dateStyle);

            setFormattedCurrencyCell(row, 5, trade.getEntryPoint(), currencyFormattedStyle);
            setFormattedCurrencyCell(row, 6, trade.getExitPoint(), currencyFormattedStyle);
            setFormattedCurrencyCell(row, 7, trade.getVolumeInCurrency(), currencyFormattedStyle);
            setFormattedCurrencyCell(row, 8, trade.getProfitLoss(), currencyFormattedStyle);

            Cell entryReasonCell = row.createCell(9);
            entryReasonCell.setCellValue(trade.getEntryReason() != null ? trade.getEntryReason() : "");
            entryReasonCell.setCellStyle(textWrapStyle);

            Cell exitReasonCell = row.createCell(10);
            exitReasonCell.setCellValue(trade.getExitReason() != null ? trade.getExitReason() : "");
            exitReasonCell.setCellStyle(textWrapStyle);

            Cell commentCell = row.createCell(11);
            commentCell.setCellValue(trade.getComment() != null ? trade.getComment() : "");
            commentCell.setCellStyle(textWrapStyle);
        }

        setTradesColumnWidths(sheet);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private void setStatisticsColumnWidths(Sheet sheet) {
        sheet.setColumnWidth(0, 8000); // ~40 —Å–∏–º–≤–æ–ª–æ–≤
        sheet.setColumnWidth(1, 4000); // ~20 —Å–∏–º–≤–æ–ª–æ–≤
        log.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª–∏—Å—Ç–∞ —Å–¥–µ–ª–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
     */
    private void setTradesColumnWidths(Sheet sheet) {
        int[] columnWidths = {
                2500, 6000, 3500, 3500, 4000, 5500,
                5500, 5500, 6000, 10000, 10000, 8000
        };

        for (int i = 0; i < columnWidths.length; i++) {
            sheet.setColumnWidth(i, columnWidths[i]);
        }

        log.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª–∏—Å—Ç–∞ —Å–¥–µ–ª–æ–∫");
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private void addStatRow(Sheet sheet, int rowNum, String label, String value, CellStyle valueStyle) {
        Row row = sheet.createRow(rowNum);

        Cell labelCell = row.createCell(0);
        labelCell.setCellValue(label);
        labelCell.setCellStyle(createDataStyle(sheet.getWorkbook()));

        Cell valueCell = row.createCell(1);
        valueCell.setCellValue(value);
        valueCell.setCellStyle(valueStyle);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∞–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
     */
    private void setFormattedCurrencyCell(Row row, int cellNum, BigDecimal value, CellStyle style) {
        Cell cell = row.createCell(cellNum);
        if (value != null) {
            cell.setCellValue(NumberFormatUtil.formatCurrencyWithSpaces(value));
        } else {
            cell.setCellValue("0.00 $");
        }
        cell.setCellStyle(style);
    }

    private CellStyle createTitleStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setFontHeightInPoints((short) 16);
        font.setColor(IndexedColors.DARK_BLUE.getIndex());
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        return style;
    }

    private CellStyle createHeaderStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setFontHeightInPoints((short) 12);
        font.setColor(IndexedColors.WHITE.getIndex());
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }

    private CellStyle createDataStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        return style;
    }

    private CellStyle createCenteredDataStyle(Workbook workbook) {
        CellStyle style = createDataStyle(workbook);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }

    private CellStyle createTextWrapStyle(Workbook workbook) {
        CellStyle style = createDataStyle(workbook);
        style.setWrapText(true);
        style.setAlignment(HorizontalAlignment.LEFT);
        style.setVerticalAlignment(VerticalAlignment.TOP);
        return style;
    }

    private CellStyle createCurrencyFormattedStyle(Workbook workbook) {
        CellStyle style = createDataStyle(workbook);
        style.setAlignment(HorizontalAlignment.RIGHT);
        return style;
    }

    private CellStyle createCurrencyStyle(Workbook workbook) {
        CellStyle style = createDataStyle(workbook);
        style.setDataFormat(workbook.createDataFormat().getFormat("$#,##0.00"));
        style.setAlignment(HorizontalAlignment.RIGHT);
        return style;
    }

    private CellStyle createDateStyle(Workbook workbook) {
        CellStyle style = createDataStyle(workbook);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }
}