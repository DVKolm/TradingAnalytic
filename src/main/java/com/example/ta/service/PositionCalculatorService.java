package com.example.ta.service;

import com.example.ta.domain.trading.PositionCalculation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Slf4j
@Service
public class PositionCalculatorService {

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public PositionCalculation calculatePosition(PositionCalculation input) {
        log.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: –¥–µ–ø–æ–∑–∏—Ç={}, —Ä–∏—Å–∫={}%, –≤—Ö–æ–¥={}, —Å—Ç–æ–ø={}",
                input.getDeposit(), input.getRisk(), input.getEntryPrice(), input.getStopPrice());

        validateInput(input);

        PositionCalculation result = new PositionCalculation();

        result.setDeposit(input.getDeposit());
        result.setRisk(input.getRisk());
        result.setEntryPrice(input.getEntryPrice());
        result.setStopPrice(input.getStopPrice());
        result.setCurrency(input.getCurrency());

        BigDecimal stopPercentage = calculateStopPercentage(input.getEntryPrice(), input.getStopPrice());
        result.setStopPercentage(stopPercentage);

        BigDecimal riskAmount = calculateRiskAmount(input.getDeposit(), input.getRisk());
        result.setRiskAmount(riskAmount);

        BigDecimal coinQuantity = calculateCoinQuantity(input.getDeposit(), input.getRisk(),
                stopPercentage, input.getEntryPrice());
        result.setCoinQuantity(coinQuantity);

        BigDecimal positionSize = calculatePositionSize(coinQuantity, input.getEntryPrice());
        result.setPositionSize(positionSize);

        result.setDescription(generateDescription(result));

        log.info("–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —Å—Ç–æ–ø {}%, –º–æ–Ω–µ—Ç {}, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {} USDT",
                stopPercentage, coinQuantity, positionSize);

        return result;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ Excel:
     * =–ï–°–õ–ò(B3>B4; –û–ö–†–£–ì–õ(100-(B4/B3*100);1); –û–ö–†–£–ì–õ(100-(B3/B4*100);1))
     */
    public BigDecimal calculateStopPercentage(BigDecimal entryPrice, BigDecimal stopPrice) {
        if (entryPrice == null || stopPrice == null) {
            throw new IllegalArgumentException("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏ —Ü–µ–Ω–∞ —Å—Ç–æ–ø–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
        }

        BigDecimal percentage;

        if (entryPrice.compareTo(stopPrice) > 0) {
            percentage = BigDecimal.valueOf(100).subtract(
                    stopPrice.divide(entryPrice, 10, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100))
            );
        } else {
            percentage = BigDecimal.valueOf(100).subtract(
                    entryPrice.divide(stopPrice, 10, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100))
            );
        }

        return percentage.setScale(1, RoundingMode.HALF_UP);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç:
     * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = (–î–µ–ø–æ–∑–∏—Ç * –†–∏—Å–∫% / 100) / (–¶–µ–Ω–∞_–≤—Ö–æ–¥–∞ * –ü—Ä–æ—Ü–µ–Ω—Ç_—Å—Ç–æ–ø–∞ / 100)
     */
    public BigDecimal calculateCoinQuantity(BigDecimal deposit, BigDecimal riskPercent,
                                            BigDecimal stopPercentage, BigDecimal entryPrice) {
        if (deposit == null || riskPercent == null || stopPercentage == null || entryPrice == null) {
            throw new IllegalArgumentException("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã");
        }

        if (stopPercentage.compareTo(BigDecimal.ZERO) == 0) {
            throw new IllegalArgumentException("–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é");
        }

        BigDecimal riskAmountUSDT = deposit
                .multiply(riskPercent)
                .divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP);

        BigDecimal stopLossPerCoin = entryPrice
                .multiply(stopPercentage)
                .divide(BigDecimal.valueOf(100), 8, RoundingMode.HALF_UP);

        BigDecimal coinQuantity = riskAmountUSDT
                .divide(stopLossPerCoin, 6, RoundingMode.HALF_UP);

        log.debug("–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç: —Ä–∏—Å–∫USDT={}, —Å—Ç–æ–ø–ù–∞–ú–æ–Ω–µ—Ç—É={}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={}",
                riskAmountUSDT, stopLossPerCoin, coinQuantity);

        return coinQuantity.setScale(6, RoundingMode.HALF_UP);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
     */
    public BigDecimal calculatePositionSize(BigDecimal coinQuantity, BigDecimal entryPrice) {
        if (coinQuantity == null || entryPrice == null) {
            return BigDecimal.ZERO;
        }

        return coinQuantity.multiply(entryPrice).setScale(2, RoundingMode.HALF_UP);
    }

    /**
     * –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ç–æ–ø–∞
     */
    public BigDecimal quickStopPercentageCalculation(BigDecimal entryPrice, BigDecimal stopPrice) {
        return calculateStopPercentage(entryPrice, stopPrice);
    }

    /**
     * –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –≤ –≤–∞–ª—é—Ç–µ
     */
    public BigDecimal calculateRiskAmount(BigDecimal deposit, BigDecimal riskPercent) {
        if (deposit == null || riskPercent == null) {
            return BigDecimal.ZERO;
        }
        return deposit.multiply(riskPercent).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private void validateInput(PositionCalculation input) {
        if (input.getDeposit() == null || input.getDeposit().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–î–µ–ø–æ–∑–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
        }

        if (input.getRisk() == null || input.getRisk().compareTo(BigDecimal.ZERO) <= 0 ||
                input.getRisk().compareTo(BigDecimal.valueOf(100)) > 0) {
            throw new IllegalArgumentException("–†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 100%");
        }

        if (input.getEntryPrice() == null || input.getEntryPrice().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
        }

        if (input.getStopPrice() == null || input.getStopPrice().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–¶–µ–Ω–∞ —Å—Ç–æ–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
        }

        if (input.getEntryPrice().compareTo(input.getStopPrice()) == 0) {
            throw new IllegalArgumentException("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏ —Ü–µ–Ω–∞ —Å—Ç–æ–ø–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏");
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
     */
    private String generateDescription(PositionCalculation calc) {
        String positionType = calc.getEntryPrice().compareTo(calc.getStopPrice()) > 0 ? "LONG" : "SHORT";

        return String.format(
                "üìä –†–ê–°–ß–ï–¢ %s –ü–û–ó–ò–¶–ò–ò\n\n" +
                        "–î–µ–ø–æ–∑–∏—Ç: %.2f %s\n" +
                        "–†–∏—Å–∫: %.1f%% (%.2f %s)\n" +
                        "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: %.2f\n" +
                        "–°—Ç–æ–ø-–ª–æ—Å—Å: %.2f\n\n" +
                        "–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø–∞: %.1f%%\n" +
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: %.6f\n" +
                        "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: %.2f %s\n\n" +
                        "–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ %.2f %s (%.1f%% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)",
                positionType,
                calc.getDeposit(), calc.getCurrency(),
                calc.getRisk(), calc.getRiskAmount(), calc.getCurrency(),
                calc.getEntryPrice(),
                calc.getStopPrice(),
                calc.getStopPercentage(),
                calc.getCoinQuantity(),
                calc.getPositionSize(), calc.getCurrency(),
                calc.getRiskAmount(), calc.getCurrency(), calc.getRisk()
        );
    }
}