package com.example.ta.service;

import com.example.ta.domain.NewsMessage;
import com.example.ta.domain.TelegramChannel;
import com.example.ta.repository.NewsMessageRepository;
import com.example.ta.repository.TelegramChannelRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@RequiredArgsConstructor
@Slf4j
public class TelegramNewsService {

    private final NewsMessageRepository newsMessageRepository;
    private final TelegramChannelRepository channelRepository;

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    private static final Pattern TIME_PATTERN = Pattern.compile("(\\d{1,2}:\\d{2})");
    private static final Pattern DATE_TIME_PATTERN = Pattern.compile("(\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s+(\\d{1,2}:\\d{2})");

    // –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
    private static final ZoneId LOCAL_ZONE = ZoneId.systemDefault(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    /**
     * üïê –®–ï–î–£–õ–ï–†: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
     */
    @Scheduled(fixedRate = 100000) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    @Transactional
    public void fetchAllChannelNews() {
        List<TelegramChannel> activeChannels = channelRepository.findAllActive();

        if (activeChannels.isEmpty()) {
            log.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            return;
        }

        log.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {} –∫–∞–Ω–∞–ª–æ–≤", activeChannels.size());

        for (TelegramChannel channel : activeChannels) {
            try {
                fetchChannelNews(channel);
                Thread.sleep(2000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {}: {}",
                        channel.getUsername(), e.getMessage());
            }
        }
    }

    /**
     * üï∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
     */
    private void fetchChannelNews(TelegramChannel channel) {
        try {
            String url = "https://t.me/s/" + channel.getUsername();
            log.debug("üì° –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {} ({})", channel.getUsername(), url);

            Document doc = Jsoup.connect(url)
                    .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
                    .timeout(15000)
                    .followRedirects(true)
                    .get();

            Elements messages = doc.select(".tgme_widget_message");
            log.debug("–ù–∞–π–¥–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {}", messages.size(), channel.getUsername());

            int newMessages = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            for (Element messageElement : messages.subList(0, Math.min(20, messages.size()))) {
                try {
                    if (parseAndSaveMessage(messageElement, channel)) {
                        newMessages++;
                    }
                } catch (Exception e) {
                    log.debug("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
                }
            }

            if (newMessages > 0) {
                log.info("‚úÖ –ö–∞–Ω–∞–ª {}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                        channel.getUsername(), newMessages);
            } else {
                log.debug("üì≠ –ö–∞–Ω–∞–ª {}: –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç", channel.getUsername());
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É {}: {}",
                    channel.getUsername(), e.getMessage());
        }
    }

    /**
     * üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private boolean parseAndSaveMessage(Element messageElement, TelegramChannel channel) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            String dataPost = messageElement.attr("data-post");
            if (dataPost.isEmpty()) return false;

            String[] parts = dataPost.split("/");
            if (parts.length < 2) return false;

            int messageId = Integer.parseInt(parts[1]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            Optional<NewsMessage> existing = newsMessageRepository
                    .findByTelegramMessageIdAndChannelUsername(messageId, channel.getUsername());

            if (existing.isPresent()) {
                return false; // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            Element textElement = messageElement.select(".tgme_widget_message_text").first();
            if (textElement == null) return false;

            String messageText = textElement.text();
            if (messageText.trim().isEmpty()) return false;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
            LocalDateTime messageDate = extractMessageDateWithTimezone(messageElement);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            NewsMessage newsMessage = new NewsMessage();
            newsMessage.setTelegramMessageId(messageId);
            newsMessage.setChannelUsername(channel.getUsername());
            newsMessage.setChannelTitle(channel.getTitle());
            newsMessage.setMessageText(messageText);
            newsMessage.setMessageDate(messageDate);

            newsMessageRepository.save(newsMessage);

            log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {} - {} (–≤—Ä–µ–º—è: {})",
                    channel.getUsername(),
                    messageText.substring(0, Math.min(50, messageText.length())),
                    messageDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

            return true;

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
            return false;
        }
    }

    /**
     * üïê –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
     */
    private LocalDateTime extractMessageDateWithTimezone(Element messageElement) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
            Element timeElement = messageElement.select(".tgme_widget_message_date time").first();

            if (timeElement != null) {
                String datetime = timeElement.attr("datetime");
                if (!datetime.isEmpty()) {
                    // –ü–∞—Ä—Å–∏–º ISO datetime –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    ZonedDateTime utcTime = ZonedDateTime.parse(datetime);
                    ZonedDateTime localTime = utcTime.withZoneSameInstant(LOCAL_ZONE);

                    log.debug("–í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è: UTC={}, Local={}",
                            utcTime.format(DateTimeFormatter.ofPattern("HH:mm")),
                            localTime.format(DateTimeFormatter.ofPattern("HH:mm")));

                    return localTime.toLocalDateTime();
                }

                // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                String timeText = timeElement.text().trim();
                if (!timeText.isEmpty()) {
                    return parseTimeText(timeText);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ time —ç–ª–µ–º–µ–Ω—Ç, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            Element dateElement = messageElement.select(".tgme_widget_message_date").first();
            if (dateElement != null) {
                String dateText = dateElement.text().trim();
                return parseTimeText(dateText);
            }

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã: {}", e.getMessage());
        }

        log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è");
        return LocalDateTime.now();
    }

    /**
     * üï∞Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
     */
    private LocalDateTime parseTimeText(String timeText) {
        try {
            LocalDateTime now = LocalDateTime.now();

            // –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm"
            Matcher timeMatcher = TIME_PATTERN.matcher(timeText);
            if (timeMatcher.find()) {
                String timeStr = timeMatcher.group(1);
                String[] timeParts = timeStr.split(":");
                int hour = Integer.parseInt(timeParts[0]);
                int minute = Integer.parseInt(timeParts[1]);

                // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                LocalDateTime messageTime = now.withHour(hour).withMinute(minute).withSecond(0).withNano(0);

                // –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—á–µ—Ä–∞—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (messageTime.isAfter(now.plusMinutes(10))) {
                    messageTime = messageTime.minusDays(1);
                }

                return messageTime;
            }

            // –ò—â–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dd.MM.yyyy HH:mm"
            Matcher dateTimeMatcher = DATE_TIME_PATTERN.matcher(timeText);
            if (dateTimeMatcher.find()) {
                String dateStr = dateTimeMatcher.group(1);
                String timeStr = dateTimeMatcher.group(2);

                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
                return LocalDateTime.parse(dateStr + " " + timeStr, formatter);
            }

            // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "—Å–µ–≥–æ–¥–Ω—è"
            if (timeText.toLowerCase().contains("—Å–µ–≥–æ–¥–Ω—è") || timeText.toLowerCase().contains("today")) {
                Matcher timeMatcher2 = TIME_PATTERN.matcher(timeText);
                if (timeMatcher2.find()) {
                    String timeStr = timeMatcher2.group(1);
                    String[] timeParts = timeStr.split(":");
                    int hour = Integer.parseInt(timeParts[0]);
                    int minute = Integer.parseInt(timeParts[1]);

                    return now.withHour(hour).withMinute(minute).withSecond(0).withNano(0);
                }
            }

            // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–≤—á–µ—Ä–∞"
            if (timeText.toLowerCase().contains("–≤—á–µ—Ä–∞") || timeText.toLowerCase().contains("yesterday")) {
                Matcher timeMatcher2 = TIME_PATTERN.matcher(timeText);
                if (timeMatcher2.find()) {
                    String timeStr = timeMatcher2.group(1);
                    String[] timeParts = timeStr.split(":");
                    int hour = Integer.parseInt(timeParts[0]);
                    int minute = Integer.parseInt(timeParts[1]);

                    return now.minusDays(1).withHour(hour).withMinute(minute).withSecond(0).withNano(0);
                }
            }

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{}': {}", timeText, e.getMessage());
        }

        return LocalDateTime.now();
    }

    /**
     * üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    public List<NewsMessage> getLatestNews(int limit) {
        try {
            List<NewsMessage> news = newsMessageRepository.findLatestNewsFromActiveChannels(limit);
            log.debug("üì∞ –ü–æ–ª—É—á–µ–Ω–æ {} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", news.size());
            return news;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", e);
            return newsMessageRepository.findLatestNews(limit);
        }
    }

    /**
     * üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     */
    public List<NewsMessage> getChannelNews(String channelUsername, int limit) {
        return newsMessageRepository.findLatestNewsByChannel(channelUsername, limit);
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
     */
    public List<NewsMessage> searchNews(String keyword, int limit) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return getLatestNews(limit);
        }
        return newsMessageRepository.findNewsByKeyword(keyword.trim(), limit);
    }

    /**
     * ‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
     */
    public List<NewsMessage> getRecentNews(int hours) {
        LocalDateTime since = LocalDateTime.now().minusHours(hours);
        return newsMessageRepository.findNewsSince(since);
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
     */
    public List<Object[]> getChannelStatistics() {
        return newsMessageRepository.getChannelStatistics();
    }

    /**
     * üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public long getTodayMessagesCount() {
        LocalDateTime startOfDay = LocalDateTime.now().with(LocalTime.MIN);
        LocalDateTime endOfDay = LocalDateTime.now().with(LocalTime.MAX);
        return newsMessageRepository.countTodayMessages(startOfDay, endOfDay);
    }

    /**
     * üìÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public List<NewsMessage> getNewsByDateRange(LocalDateTime startDate, LocalDateTime endDate) {
        return newsMessageRepository.findNewsBetweenDates(startDate, endDate);
    }

    /**
     * üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
     */
    public void refreshNews() {
        log.info("üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π");
        fetchAllChannelNews();
        log.info("üìä –°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω–æ {} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", getTodayMessagesCount());
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
     */
    public List<TelegramChannel> getActiveChannels() {
        return channelRepository.findAllActive();
    }

    /**
     * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @Transactional
    public void addChannel(String username, String title, String description) {
        // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (username.startsWith("@")) {
            username = username.substring(1);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
        Optional<TelegramChannel> existing = channelRepository.findByUsername(username);
        if (existing.isPresent()) {
            if (existing.get().getIsActive()) {
                throw new IllegalArgumentException("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω");
            } else {
                // –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                existing.get().setIsActive(true);
                channelRepository.save(existing.get());
                log.info("‚úÖ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª: @{}", username);
                return;
            }
        }

        TelegramChannel channel = new TelegramChannel();
        channel.setUsername(username);
        channel.setTitle(title.isEmpty() ? username : title);
        channel.setDescription(description);
        channel.setIsActive(true);
        channel.setCreatedAt(LocalDateTime.now());

        channelRepository.save(channel);
        log.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: @{}", username);
    }

    /**
     * ‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
     */
    @Transactional
    public void removeChannel(String username) {
        Optional<TelegramChannel> channel = channelRepository.findByUsername(username);
        if (channel.isPresent()) {
            channel.get().setIsActive(false);
            channelRepository.save(channel.get());
            log.info("‚è∏Ô∏è –ö–∞–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: @{}", username);
        }
    }
}