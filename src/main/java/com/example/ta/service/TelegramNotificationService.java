package com.example.ta.service;

import com.example.ta.domain.news.TelegramSettings;
import com.example.ta.domain.trading.Trade;
import com.example.ta.repository.TelegramSettingsRepository;
import com.example.ta.util.NumberFormatUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramNotificationService {

    private final TelegramSettingsRepository settingsRepository;
    private TelegramLongPollingBot bot;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private void initializeBotIfNeeded() {
        if (bot != null) return;

        Optional<TelegramSettings> settingsOpt = getEnabledSettings();
        if (settingsOpt.isEmpty()) {
            log.debug("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã");
            return;
        }

        TelegramSettings settings = settingsOpt.get();
        if (isValidSettings(settings)) {
            try {
                bot = new TradingAnalyticsBot(settings.getBotToken());
                log.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞", e);
                bot = null;
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã)
     */
    public void sendTradeNotification(Trade trade, String action) {
        try {
            Optional<TelegramSettings> settingsOpt = getEnabledSettings();

            if (settingsOpt.isEmpty()) {
                log.debug("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
                return;
            }

            TelegramSettings settings = settingsOpt.get();

            if (!isValidSettings(settings)) {
                log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                return;
            }

            if (!shouldSendNotification(settings, action)) {
                log.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{}' –æ—Ç–∫–ª—é—á–µ–Ω–æ", action);
                return;
            }

            initializeBotIfNeeded();
            if (bot == null) {
                log.warn("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                return;
            }

            String message = formatTradeMessage(trade, action, settings);

            if (settings.getIncludeChartImage() && trade.hasChartImage()) {
                sendPhotoWithMessage(settings.getChatId(), message, trade.getChartImagePath());
            } else {
                sendTextMessage(settings.getChatId(), message);
            }

            log.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {} ({})", trade.getAssetName(), action);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", e);
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    public boolean testConnection(TelegramSettings settings) {
        if (!isValidSettings(settings)) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            return false;
        }

        try {
            TelegramLongPollingBot testBot = new TradingAnalyticsBot(settings.getBotToken());

            SendMessage message = new SendMessage();
            message.setChatId(settings.getChatId());
            message.setText("ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Trading Analytics!\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            message.setParseMode("HTML");

            testBot.execute(message);
            log.info("‚úÖ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram —É—Å–ø–µ—à–µ–Ω");
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private boolean isValidSettings(TelegramSettings settings) {
        return settings != null
                && settings.getEnabled()
                && settings.getBotToken() != null
                && !settings.getBotToken().trim().isEmpty()
                && settings.getChatId() != null
                && !settings.getChatId().trim().isEmpty();
    }

    private void sendTextMessage(String chatId, String text) {
        if (bot == null) return;

        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);
            message.setParseMode("HTML");

            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    private void sendPhotoWithMessage(String chatId, String caption, String imagePath) {
        if (bot == null) return;

        try {
            File imageFile = new File(imagePath);
            if (!imageFile.exists()) {
                log.warn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", imagePath);
                sendTextMessage(chatId, caption);
                return;
            }

            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId);
            photo.setPhoto(new InputFile(imageFile));
            photo.setCaption(caption);
            photo.setParseMode("HTML");

            bot.execute(photo);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", e.getMessage());
            sendTextMessage(chatId, caption);
        }
    }

    private String formatTradeMessage(Trade trade, String action, TelegramSettings settings) {
        if (settings.getMessageTemplate() != null && !settings.getMessageTemplate().trim().isEmpty()) {
            return formatCustomTemplate(trade, action, settings.getMessageTemplate());
        }
        return formatDefaultMessage(trade, action);
    }

    private String formatDefaultMessage(Trade trade, String action) {
        StringBuilder message = new StringBuilder();

        String actionEmoji = switch (action.toLowerCase()) {
            case "open", "create" -> "üü¢";
            case "close" -> "üî¥";
            case "update" -> "üü°";
            default -> "üìä";
        };

        String actionText = switch (action.toLowerCase()) {
            case "open", "create" -> "–û–¢–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø";
            case "close" -> "–ó–ê–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø";
            case "update" -> "–û–ë–ù–û–í–õ–ï–ù–ê –ü–û–ó–ò–¶–ò–Ø";
            default -> "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–î–ï–õ–ö–ï";
        };

        message.append(actionEmoji).append(" <b>").append(actionText).append("</b>\n\n");
        message.append("üí∞ <b>–ê–∫—Ç–∏–≤:</b> ").append(trade.getAssetName()).append("\n");
        message.append("üìà <b>–¢–∏–ø:</b> ").append(trade.getTradeType().getDisplayName()).append("\n");
        message.append("üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ").append(formatPrice(trade.getEntryPoint())).append("\n");

        if (trade.getTakeProfitTarget() != null) {
            message.append("üéØ <b>–¶–µ–ª—å (Take Profit):</b> ").append(formatPrice(trade.getTakeProfitTarget())).append("\n");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–æ —Ü–µ–ª–∏
            BigDecimal potentialProfitToTarget = trade.calculatePotentialProfitToTarget();
            if (potentialProfitToTarget != null) {
                message.append("üíé <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ").append(formatProfitLoss(potentialProfitToTarget)).append("\n");
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ —Ü–µ–ª–∏
            BigDecimal percentageToTarget = trade.calculatePercentageToTarget();
            if (percentageToTarget != null) {
                message.append("üìä <b>% –¥–æ —Ü–µ–ª–∏:</b> ").append(formatPercentage(percentageToTarget)).append("\n");
            }
        }


        if (trade.getExitPoint() != null) {
            message.append("üèÅ <b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> ").append(formatPrice(trade.getExitPoint())).append("\n");
        }

        message.append("üìä <b>–û–±—ä–µ–º:</b> ").append(formatVolume(trade.getVolume())).append(trade.getAssetName()).append("\n");
        message.append("üíé <b>–û–±—ä–µ–º –≤ USD:</b> ").append(formatVolumeInCurrency(trade.getVolumeInCurrency())).append("\n");

        if (trade.getProfitLoss() != null) {
            String profitEmoji = trade.getProfitLoss().compareTo(BigDecimal.ZERO) >= 0 ? "üíö" : "‚ù§Ô∏è";
            message.append(profitEmoji).append(" <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ").append(formatProfitLoss(trade.getProfitLoss())).append("\n");
        }

        if (trade.getPriceMovementPercent() != null) {
            message.append("üìä <b>–î–≤–∏–∂–µ–Ω–∏–µ:</b> ").append(formatPercentage(trade.getPriceMovementPercent())).append("\n");
        }

        message.append("üìÖ <b>–î–∞—Ç–∞:</b> ").append(trade.getTradeDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))).append("\n");
        message.append("üî∑ <b>–°—Ç–∞—Ç—É—Å:</b> ").append(trade.getStatus().getDisplayName()).append("\n");

        if (trade.getEntryReason() != null && !trade.getEntryReason().trim().isEmpty()) {
            message.append("\nüí≠ <b>–ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞:</b>\n").append(trade.getEntryReason()).append("\n");
        }

        message.append("\n‚è∞ ").append(java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        return message.toString();
    }

    private String formatCustomTemplate(Trade trade, String action, String template) {
        return template
                .replace("{asset}", trade.getAssetName())
                .replace("{type}", trade.getTradeType().getDisplayName())
                .replace("{entryPrice}", formatPrice(trade.getEntryPoint()))
                .replace("{exitPrice}", trade.getExitPoint() != null ? formatPrice(trade.getExitPoint()) : "N/A")
                .replace("{volume}", formatVolume(trade.getVolume()))
                .replace("{profitLoss}", formatProfitLoss(trade.getProfitLoss()))
                .replace("{status}", trade.getStatus().getDisplayName())
                .replace("{action}", action.toUpperCase());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NumberFormatUtil
     * –†–µ–∑—É–ª—å—Ç–∞—Ç: $156,00
     */
    private String formatPrice(BigDecimal price) {
        if (price == null) return "N/A";
        return "$" + NumberFormatUtil.formatNumberWithSpaces(price);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
     * –†–µ–∑—É–ª—å—Ç–∞—Ç: 15,00
     */
    private String formatVolume(BigDecimal volume) {
        if (volume == null) return "N/A";
        return NumberFormatUtil.formatNumber(volume, 2);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –≤ –≤–∞–ª—é—Ç–µ
     * –†–µ–∑—É–ª—å—Ç–∞—Ç: $2 340,00
     */
    private String formatVolumeInCurrency(BigDecimal volumeInCurrency) {
        if (volumeInCurrency == null) return "N/A";
        return "$" + NumberFormatUtil.formatNumberWithSpaces(volumeInCurrency);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
     * –†–µ–∑—É–ª—å—Ç–∞—Ç: $285,00
     */
    private String formatProfitLoss(BigDecimal profitLoss) {
        if (profitLoss == null) return "N/A";
        return "$" + NumberFormatUtil.formatNumberWithSpaces(profitLoss);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
     * –†–µ–∑—É–ª—å—Ç–∞—Ç: 12,18%
     */
    private String formatPercentage(BigDecimal percentage) {
        if (percentage == null) return "N/A";
        return NumberFormatUtil.formatPercentage(percentage);
    }

    private boolean shouldSendNotification(TelegramSettings settings, String action) {
        return switch (action.toLowerCase()) {
            case "open", "create" -> settings.getSendOnTradeOpen();
            case "close" -> settings.getSendOnTradeClose();
            case "update" -> settings.getSendOnTradeUpdate();
            default -> false;
        };
    }

    private Optional<TelegramSettings> getEnabledSettings() {
        return settingsRepository.findEnabledSettings();
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
     */
    private static class TradingAnalyticsBot extends TelegramLongPollingBot {
        private final String token;

        public TradingAnalyticsBot(String token) {
            this.token = token;
        }

        @Override
        public String getBotUsername() {
            return "TradingAnalyticsBot";
        }

        @Override
        public String getBotToken() {
            return token;
        }

        @Override
        public void onUpdateReceived(Update update) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                String chatId = update.getMessage().getChatId().toString();

                if ("/start".equals(messageText)) {
                    sendWelcomeMessage(chatId);
                } else if ("/chatid".equals(messageText)) {
                    sendChatId(chatId);
                }
            }
        }

        private void sendWelcomeMessage(String chatId) {
            String welcomeText = """
                    ü§ñ <b>Trading Analytics Bot</b>
                    
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–∫–∞—Ö.
                    
                    üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
                    /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    /chatid - –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    
                    üÜî <b>Chat ID:</b> <code>%s</code>
                    
                    –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
                    """.formatted(chatId);

            sendText(chatId, welcomeText);
        }

        private void sendChatId(String chatId) {
            String text = """
                    üÜî <b>Chat ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞:</b>
                    
                    <code>%s</code>
                    
                    –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Trading Analytics.
                    """.formatted(chatId);

            sendText(chatId, text);
        }

        private void sendText(String chatId, String text) {
            try {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(text);
                message.setParseMode("HTML");
                execute(message);
            } catch (TelegramApiException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
            }
        }
    }
}